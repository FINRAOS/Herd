---
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

basePath: "/dm-app/rest"
consumes:
- application/json
- application/xml
definitions:
  activitiJobXml:
    description: Activiti workflow XML related to the Job
    type: string
  allowMissingData:
    default: false
    description: If true, the call would not fail with an Not Found (status code 404)
      error when all or some business object data is not available for the specified
      partition values
    type: boolean
  Attribute:
    properties:
      name:
        description: Name of the individual piece of metadata
        type: string
      value:
        description: Value of the individual piece of metadata
        type: string
    required:
    - name
    - value
  Attributes:
    items:
      $ref: "#/definitions/Attribute"
      xml:
        name: attribute
    type: array
    xml:
      wrapped: true
  awsAccessKey:
    description: The access key ID that identifies the temporary security credentials
      required to perform a single file upload to the S3_MANAGED_LOADING_DOCK storage
    type: string
  awsKmsKeyId:
    description: A unique identifier for the AWS KMS key to be used for server-side
      encryption on the S3_MANAGED_LOADING_DOCK storage
    type: string
  awsSecretKey:
    description: The AWS secret access key that is part of the temporary security
      credentials required to perform a single file upload to the S3_MANAGED_LOADING_DOCK
      storage
    type: string
  awsSessionExpirationTime:
    description: The time when the temporary credentials will expire. If the upload
      will take longer than the credential expiration, then the Upload Single Credential
      Extension Get REST endpoint should be used to get a set of extended credentials
    type: string
  awsSessionToken:
    description: The token that users must pass to the service API to use the temporary
      security credentials required to perform a single file upload to the S3_MANAGED_LOADING_DOCK
      storage
    type: string
  buildDate:
    description: The date/time when the build was performed
    type: string
  buildInfo:
    example: |-
        <buildInfo>
          <buildOs>Linux 2.6.18-308.24.1.el5 amd64</buildOs>
          <buildUser>sfcm</buildUser>
          <buildDate>20140520_184841</buildDate>
          <buildNumber>1.0.0-SNAPSHOT</buildNumber>
        </buildInfo>
    properties:
      buildDate:
        $ref: "#/definitions/buildDate"
      buildNumber:
        $ref: "#/definitions/buildNumber"
      buildOs:
        $ref: "#/definitions/buildOs"
      buildUser:
        $ref: "#/definitions/buildUser"
    required:
    - buildDate
    - buildNumber
    - buildOs
    - buildUser
  buildNumber:
    description: The Maven POM version number of the build artifacts
    type: string
  buildOs:
    description: The operating system the build was done on
    type: string
  buildUser:
    description: The user Id that performed the build
    type: string
  businessObjectData:
    allOf:
    - $ref: "#/definitions/businessObjectFormatKey"
    - required:
      - partitionKey
      - partitionValue
      - status
      - storageUnits
      - id
      - status
      - version
      - latestVersion
      properties:
        status:
          $ref: "#/definitions/status"
        storageUnits:
          items:
            $ref: "#/definitions/StorageUnit"
          type: array
        partitionKey:
          $ref: "#/definitions/partitionKey"
        businessObjectDataParents:
          $ref: "#/definitions/businessObjectDataKeys"
        subPartitionValues:
          items:
            type: string
          type: array
        partitionValue:
          $ref: "#/definitions/partitionValue"
        attributes:
          $ref: "#/definitions/Attributes"
        latestVersion:
          type: boolean
          description: A boolean flag that shows whether this instance of data is
            the latest or not. Once a new version of data is registered, any previous
            versions will no longer be the latest
        version:
          $ref: "#/definitions/version"
        id:
          $ref: "#/definitions/id"
    example: |-
        <businessObjectData>
          <id>1</id>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionKey>PROCESS_DATE</partitionKey>
          <partitionValue>2014-04-01</partitionValue>
          <status>VALID</status>
          <subPartitionValues>
            <partitionValue>A</partitionValue>
            <partitionValue>B</partitionValue>
          </subPartitionValues>
          <version>0</version>
          <latestVersion>true</latestVersion>
          <storageUnits>
            <storageUnit>
              <storage>
                <name>S3_MANAGED</name>
                <storagePlatformName>S3</storagePlatformName>
                <attributes>
                  <attribute>
                    <name>bucket.name</name>
                    <value>1234-5678-3456-managed</value>
                  </attribute>
                </attributes>
              </storage>
              <storageDirectory>
                <directoryPath>app-a/exchange-a/new-orders/prc/gz/frmt-v0/data-v0/process-date=2014-04-01/exec-status=A/symbol=B</directoryPath>
              </storageDirectory>
              <storageFiles>
                <storageFile>
                  <filePath>app-a/exchange-a/new-orders/prc/gz/frmt-v0/data-v0/process-date=2014-04-01/exec-status=A/symbol=B/new_orders.2014-04-01.1.gz</filePath>
                  <fileSizeBytes>9511</fileSizeBytes>
                  <rowCount>1000</rowCount>
                </storageFile>
              </storageFiles>
            </storageUnit>
          </storageUnits>
          <attributes>
            <attribute>
              <name>test name</name>
              <value>test value</value>
            </attribute>
          </attributes>
          <businessObjectDataParents>
            <businessObjectDataKey>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS_OLD</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <partitionValue>2014-03-31</partitionValue>
              <subPartitionValues>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </subPartitionValues>
              <businessObjectDataVersion>0</businessObjectDataVersion>
            </businessObjectDataKey>
          </businessObjectDataParents>
        </businessObjectData>
  businessObjectDataAttribute:
    allOf:
    - $ref: "#/definitions/businessObjectDataAttributeCreateRequest"
    - required:
      - id
      type: object
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <businessObjectDataAttribute>
          <id>10902</id>
          <businessObjectDataAttributeKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <partitionValue>2014-04-01</partitionValue>
            <subPartitionValues>
              <partitionValue>A</partitionValue>
              <partitionValue>B</partitionValue>
            </subPartitionValues>
            <businessObjectDataVersion>0</businessObjectDataVersion>
            <businessObjectDataAttributeName>test name</businessObjectDataAttributeName>
          </businessObjectDataAttributeKey>
          <businessObjectDataAttributeValue>test value</businessObjectDataAttributeValue>
        </businessObjectDataAttribute>
  businessObjectDataAttributeCreateRequest:
    example: |-
        <businessObjectDataAttributeCreateRequest>
          <businessObjectDataAttributeKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <partitionValue>2014-04-01</partitionValue>
            <subPartitionValues>
              <partitionValue>A</partitionValue>
              <partitionValue>B</partitionValue>
            </subPartitionValues>
            <businessObjectDataVersion>0</businessObjectDataVersion>
            <businessObjectDataAttributeName>test name</businessObjectDataAttributeName>
          </businessObjectDataAttributeKey>
          <businessObjectDataAttributeValue>test value</businessObjectDataAttributeValue>
        </businessObjectDataAttributeCreateRequest>
    properties:
      businessObjectDataAttributeKey:
        $ref: "#/definitions/BusinessObjectDataAttributeKey"
        description: A wrapper for the business object data attribute key
      businessObjectDataAttributeValue:
        $ref: "#/definitions/businessObjectDataAttributeValue"
    required:
    - businessObjectDataAttributeKey
    - businessObjectDataAttributeValue
    type: object
  BusinessObjectDataAttributeKey:
    allOf:
    - $ref: "#/definitions/businessObjectDataKey"
    - required:
      - businessObjectDataAttributeName
      type: object
      properties:
        subPartitionValues:
          description: A wrapper for sub partition values
          $ref: "#/definitions/SubPartitionValues"
        businessObjectDataAttributeName:
          $ref: "#/definitions/businessObjectDataAttributeName"
  businessObjectDataAttributeKeys:
    example: |-
        <businessObjectDataAttributeKeys>
          <businessObjectDataAttributeKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <partitionValue>2014-04-01</partitionValue>
            <subPartitionValues>
              <partitionValue>A</partitionValue>
              <partitionValue>B</partitionValue>
            </subPartitionValues>
            <businessObjectDataVersion>0</businessObjectDataVersion>
            <businessObjectDataAttributeName>test name 1</businessObjectDataAttributeName>
          </businessObjectDataAttributeKey>
          <businessObjectDataAttributeKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <partitionValue>2014-04-01</partitionValue>
            <subPartitionValues>
              <partitionValue>A</partitionValue>
              <partitionValue>B</partitionValue>
            </subPartitionValues>
            <businessObjectDataVersion>0</businessObjectDataVersion>
            <businessObjectDataAttributeName>test name 2</businessObjectDataAttributeName>
          </businessObjectDataAttributeKey>
        </businessObjectDataAttributeKeys>
    items:
      $ref: "#/definitions/BusinessObjectDataAttributeKey"
      xml:
        name: businessObjectDataAttributeKey
    type: array
    xml:
      wrapped: true
  businessObjectDataAttributeName:
    description: The name of the business object data attribute
    type: string
  businessObjectDataAttributeUpdateRequest:
    example: |-
        <businessObjectDataAttributeUpdateRequest>
          <businessObjectDataAttributeValue>test value</businessObjectDataAttributeValue>
        </businessObjectDataAttributeUpdateRequest>
    properties:
      businessObjectDataAttributeValue:
        $ref: "#/definitions/businessObjectDataAttributeValue"
    required:
    - businessObjectDataAttributeValue
    type: object
  businessObjectDataAttributeValue:
    description: The value of the business object data attribute
    type: string
  businessObjectDataAvailability:
    allOf:
    - $ref: "#/definitions/businessObjectDataAvailabilityRequest"
    - required:
      - availableStatuses
      - notAvailableStatuses
      type: object
      properties:
        availableStatuses:
          items:
            $ref: "#/definitions/businessObjectDataStatus"
          type: array
        notAvailableStatuses:
          items:
            $ref: "#/definitions/businessObjectDataStatus"
          type: array
    example: |-
        <businessObjectDataAvailability>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionValueFilters>
            <partitionValueFilter>
              <partitionKey>PROCESS_DATE</partitionKey>
              <partitionValues>
                <partitionValue>2014-04-01</partitionValue>
                <partitionValue>2014-04-02</partitionValue>
              </partitionValues>
            </partitionValueFilter>
            <partitionValueFilter>
              <partitionKey>PROVIDER</partitionKey>
              <partitionValues>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </partitionValues>
            </partitionValueFilter>
          </partitionValueFilters>
          <businessObjectDataVersion>0</businessObjectDataVersion>
          <storageName>S3_MANAGED</storageName>
          <availableStatuses>
            <businessObjectDataStatus>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <partitionValue>2014-04-01</partitionValue>
              <subPartitionValues>
                <partitionValue>100</partitionValue>
                <partitionValue>A</partitionValue>
                <partitionValue>Y</partitionValue>
              </subPartitionValues>
              <businessObjectDataVersion>0</businessObjectDataVersion>
              <reason>VALID</reason>
            </businessObjectDataStatus>
          </availableStatuses>
          <notAvailableStatuses>
            <businessObjectDataStatus>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <partitionValue>2014-04-01</partitionValue>
              <subPartitionValues>
                <partitionValue />
                <partitionValue>B</partitionValue>
                <partitionValue />
              </subPartitionValues>
              <businessObjectDataVersion>0</businessObjectDataVersion>
              <reason>NOT_REGISTERED</reason>
            </businessObjectDataStatus>
          </notAvailableStatuses>
        </businessObjectDataAvailability>
  businessObjectDataAvailabilityRequest:
    allOf:
    - $ref: "#/definitions/formatKey"
    - required:
      - storageName
      - partitionValueFilters
      type: object
      properties:
        businessObjectDataVersion:
          $ref: "#/definitions/businessObjectDataVersion"
        partitionValueFilters:
          items:
            $ref: "#/definitions/partitionValueFilter"
          type: array
        businessObjectFormatVersion:
          $ref: "#/definitions/businessObjectFormatVersion"
        storageName:
          $ref: "#/definitions/storageName"
    example: |-
        <businessObjectDataAvailabilityRequest>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionValueFilters>
            <partitionValueFilter>
              <partitionKey>PROCESS_DATE</partitionKey>
              <partitionValues>
                <partitionValue>2014-04-01</partitionValue>
                <partitionValue>2014-04-02</partitionValue>
              </partitionValues>
            </partitionValueFilter>
            <partitionValueFilter>
              <partitionKey>PROVIDER</partitionKey>
              <partitionValues>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </partitionValues>
            </partitionValueFilter>
          </partitionValueFilters>
          <businessObjectDataVersion>0</businessObjectDataVersion>
          <storageName>S3_MANAGED</storageName>
        </businessObjectDataAvailabilityRequest>
  businessObjectDataCreateRequest:
    allOf:
    - $ref: "#/definitions/businessObjectFormatKey"
    - required:
      - partitionKey
      - partitionValue
      - status
      - storageUnits
      properties:
        status:
          $ref: "#/definitions/status"
        storageUnits:
          items:
            $ref: "#/definitions/StorageUnitCreateRequest"
          type: array
        partitionKey:
          $ref: "#/definitions/partitionKey"
        createNewVersion:
          $ref: "#/definitions/createNewVersion"
        businessObjectDataParents:
          $ref: "#/definitions/businessObjectDataKeys"
        subPartitionValues:
          items:
            type: string
          type: array
        partitionValue:
          $ref: "#/definitions/partitionValue"
        attributes:
          $ref: "#/definitions/Attributes"
    example: |-
        <businessObjectDataCreateRequest>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionKey>PROCESS_DATE</partitionKey>
          <partitionValue>2014-04-01</partitionValue>
          <status>VALID</status>
          <storageUnits>
            <storageUnit>
              <storageName>S3_MANAGED</storageName>
              <storageDirectory>
                <directoryPath>app-a/exchange-a/new-orders/prc/gz/frmt-v0/data-v0/process-date=2014-04-01</directoryPath>
              </storageDirectory>
              <storageFiles>
                <storageFile>
                  <filePath>app-a/exchange-a/new-orders/prc/gz/frmt-v1/data-v0/process-date=2014-04-01/new_orders.2014-04-01.1.gz</filePath>
                  <fileSizeBytes>9511</fileSizeBytes>
                  <rowCount>1000</rowCount>
                </storageFile>
              </storageFiles>
            </storageUnit>
          </storageUnits>
          <attributes>
            <attribute>
              <name>test name</name>
              <value>test value</value>
            </attribute>
          </attributes>
          <businessObjectDataParents>
            <businessObjectDataKey>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS_OLD</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <partitionValue>2014-04-01</partitionValue>
              <businessObjectDataVersion>0</businessObjectDataVersion>
            </businessObjectDataKey>
          </businessObjectDataParents>
          <createNewVersion>false</createNewVersion>
        </businessObjectDataCreateRequest>
  businessObjectDataDdl:
    allOf:
    - $ref: "#/definitions/businessObjectDataDdlRequest"
    - required:
      - ddl
      type: object
      properties:
        ddl:
          $ref: "#/definitions/ddl"
    example: |-
        <businessObjectDataDdl>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionValueFilters>
            <partitionValueFilter>
              <partitionKey>PROCESS_DATE</partitionKey>
              <partitionValueRange>
                <startPartitionValue>2014-04-01</startPartitionValue>
                <endPartitionValue>2014-04-10</endPartitionValue>
              </partitionValueRange>
            </partitionValueFilter>
            <partitionValueFilter>
              <partitionValues>
                <partitionKey>PROVIDER</partitionKey>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </partitionValues>
            </partitionValueFilter>
          </partitionValueFilters>
          <businessObjectDataVersion>0</businessObjectDataVersion>
          <storageName>S3_MANAGED</storageName>
          <outputFormat>HIVE_13_DDL</outputFormat>
          <tableName>NEW_ORDERS_PRC</tableName>
          <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
          <ddl>![CDATA[  CREATE EXTERNAL TABLE IF NOT EXISTS `NEW_ORDERS_PRC` ( columns ) PARTITIONED BY ( columns ) STORED AS ORC;
                         ALTER TABLE `NEW_ORDERS_PRC` ADD IF NOT EXISTS PARTITION ( pkey=value ) location "s3://" );]]</ddl>
        </businessObjectDataDdl>
  businessObjectDataDdlRequest:
    allOf:
    - $ref: "#/definitions/businessObjectFormatDdlRequest"
    - required:
      - partitionValueFilters
      - storageName
      properties:
        businessObjectDataVersion:
          $ref: "#/definitions/businessObjectDataVersion"
        allowMissingData:
          $ref: "#/definitions/allowMissingData"
        storageName:
          $ref: "#/definitions/storageName"
        partitionValueFilters:
          items:
            $ref: "#/definitions/partitionValueFilter"
          type: array
    example: |-
        <businessObjectDataDdlRequest>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionValueFilters>
            <partitionValueFilter>
              <partitionKey>PROCESS_DATE</partitionKey>
              <partitionValues>
                <partitionValue>2014-04-01</partitionValue>
                <partitionValue>2014-04-02</partitionValue>
              </partitionValues>
            </partitionValueFilter>
            <partitionValueFilter>
              <partitionKey>PROVIDER</partitionKey>
              <partitionValues>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </partitionValues>
            </partitionValueFilter>
          </partitionValueFilters>
          <businessObjectDataVersion>0</businessObjectDataVersion>
          <storageName>S3_MANAGED</storageName>
          <outputFormat>HIVE_13_DDL</outputFormat>
          <tableName>NEW_ORDERS_PRC</tableName>
          <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
          <includeDropTableStatement>true</includeDropTableStatement>
          <includeIfNotExistsOption>true</includeIfNotExistsOption>
          <allowMissingData>true</allowMissingData>
        </businessObjectDataDdlRequest>
  businessObjectDataEventType:
    description: |-
      The business object data event type when this notification is triggered on. Supported event types:
      * BUS_OBJCT_DATA_RGSTN

      Combination of namespace, notificationName, and businessObjectDataEventType must be unique
    type: string
  businessObjectDataKey:
    allOf:
    - $ref: "#/definitions/businessObjectFormatKey"
    - required:
      - partitionValue
      - businessObjectDataVersion
      properties:
        businessObjectDataVersion:
          $ref: "#/definitions/businessObjectDataVersion"
        subPartitionValues:
          description: A wrapper for sub partition values
          $ref: "#/definitions/SubPartitionValues"
        partitionValue:
          $ref: "#/definitions/partitionValue"
  businessObjectDataKeys:
    items:
      $ref: "#/definitions/businessObjectDataKey"
    type: array
  businessObjectDataNotificationFilter:
    properties:
      businessObjectDefinitionName:
        $ref: "#/definitions/businessObjectDefinitionName"
      businessObjectFormatFileType:
        $ref: "#/definitions/businessObjectFormatFileType"
      businessObjectFormatUsage:
        $ref: "#/definitions/businessObjectFormatUsage"
      businessObjectFormatVersion:
        $ref: "#/definitions/businessObjectFormatVersion"
      namespace:
        $ref: "#/definitions/namespaceString"
      storageName:
        $ref: "#/definitions/storageName"
    required:
    - businessObjectDefinitionName
    - namespace
  businessObjectDataNotificationRegistration:
    allOf:
    - $ref: "#/definitions/businessObjectDataNotificationRegistrationCreateRequest"
    - required:
      - id
      type: object
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <businessObjectDataNotificationRegistration>
          <id>231</id>
          <businessObjectDataNotificationRegistrationKey>
            <namespace>APP_A</namespace>
            <notificationName>NEW_ORDERS_REGISTRATION</notificationName>
          </businessObjectDataNotificationRegistrationKey>
          <businessObjectDataEventType>BDATA_REGISTRATION</businessObjectDataEventType>
          <businessObjectDataNotificationFilter>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>A</businessObjectFormatUsage>
            <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <storageName>S3_MANAGED</storageName>
          </businessObjectDataNotificationFilter>
          <jobActions>
            <jobAction>
              <namespace>APP_A</namespace>
              <jobName>new_orders_processing_job</jobName>
              <correlationData>![CDATA[...]]</correlationData>
            </jobAction>
            <jobAction>
              <namespace>APP_A</namespace>
              <jobName>new_orders_processing_job</jobName>
              <correlationData>![CDATA[...]]</correlationData>
            </jobAction>
          </jobActions>
        </businessObjectDataNotificationRegistration>
  businessObjectDataNotificationRegistrationCreateRequest:
    example: |-
        <businessObjectDataNotificationRegistrationCreateRequest>
          <businessObjectDataNotificationRegistrationKey>
            <namespace>APP_A</namespace>
            <notificationName>PRC</notificationName>
          </businessObjectDataNotificationRegistrationKey>
          <businessObjectDataEventType>BUS_OBJCT_DATA_RGSTN</businessObjectDataEventType>
          <businessObjectDataNotificationFilter>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>A</businessObjectFormatUsage>
            <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <storageName>S3_MANAGED</storageName>
          </businessObjectDataNotificationFilter>
          <jobActions>
            <jobAction>
              <namespace>APP_A</namespace>
              <jobName>new_orders_pre_processing_job</jobName>
              <correlationData>![CDATA[...]]</correlationData>
            </jobAction>
            <jobAction>
              <namespace>APP_A</namespace>
              <jobName>new_orders_processing_job</jobName>
              <correlationData>![CDATA[...]]</correlationData>
            </jobAction>
          </jobActions>
        </businessObjectDataNotificationRegistrationCreateRequest>
    properties:
      businessObjectDataEventType:
        $ref: "#/definitions/businessObjectDataEventType"
      businessObjectDataNotificationFilter:
        $ref: "#/definitions/businessObjectDataNotificationFilter"
        description: The business object data notification filter information
      businessObjectDataNotificationRegistrationKey:
        $ref: "#/definitions/businessObjectDataNotificationRegistrationKey"
        description: ''
      jobActions:
        $ref: "#/definitions/jobActions"
        description: The job notification actions. The order of actions will not be
          preserved
    required:
    - businessObjectDataEventType
    - businessObjectDataNotificationFilter
    - businessObjectDataNotificationRegistrationKey
    - jobActions
  businessObjectDataNotificationRegistrationKey:
    properties:
      namespace:
        $ref: "#/definitions/namespaceString"
      notificationName:
        $ref: "#/definitions/notificationName"
    required:
    - namespace
    - notificationName
  businessObjectDataNotificationRegistrationKeys:
    example: |-
        <businessObjectDataNotificationRegistrationKeys>
          <businessObjectDataNotificationRegistrationKey>
            <namespace>APP_A</namespace>
            <notificationName>NEW_ORDERS_REGISTRATION</notificationName>
          </businessObjectDataNotificationRegistrationKey>
        </businessObjectDataNotificationRegistrationKeys>
    items:
      $ref: "#/definitions/businessObjectDataNotificationRegistrationKey"
    type: array
  businessObjectDataStatus:
    properties:
      businessObjectDataVersion:
        $ref: "#/definitions/businessObjectDataVersion"
      businessObjectFormatVersion:
        $ref: "#/definitions/businessObjectFormatVersion"
      partitionValue:
        $ref: "#/definitions/partitionValue"
      reason:
        $ref: "#/definitions/reason"
    required:
    - businessObjectDataVersion
    - businessObjectFormatVersion
    - partitionValue
  businessObjectDataStatusUpdateRequest:
    example: |-
        <businessObjectDataStatusUpdateRequest>
          <status>VALID</status>
        </businessObjectDataStatusUpdateRequest>
    properties:
      status:
        $ref: "#/definitions/status"
    required:
    - status
  businessObjectDataStatusUpdateResponse:
    example: |-
        <businessObjectDataStatusUpdateResponse>
          <businessObjectDataKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC2</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <partitionValue>2014-04-02</partitionValue>
            <subPartitionValues>
              <partitionValue>A</partitionValue>
              <partitionValue>B</partitionValue>
            </subPartitionValues>
            <businessObjectDataVersion>0</businessObjectDataVersion>
          </businessObjectDataKey>
          <status>VALID</status>
          <previousStatus>UPLOADING</previousStatus>
        </businessObjectDataStatusUpdateResponse>
    properties:
      businessObjectDataKey:
        $ref: "#/definitions/businessObjectDataKey"
      previousStatus:
        $ref: "#/definitions/status"
      status:
        $ref: "#/definitions/status"
    required:
    - businessObjectDataKey
    - previousStatus
    - status
    type: object
  businessObjectDataStorageFilesCreateRequest:
    allOf:
    - $ref: "#/definitions/businessObjectFormatKey"
    - required:
      - partitionValue
      - businessObjectDataVersion
      - storageFiles
      - storageName
      properties:
        storageFiles:
          items:
            $ref: "#/definitions/StorageFile"
          type: array
        businessObjectDataVersion:
          $ref: "#/definitions/businessObjectDataVersion"
        partitionValue:
          $ref: "#/definitions/partitionValue"
        storageName:
          $ref: "#/definitions/storageName"
        subPartitionValues:
          items:
            type: string
          type: array
    example: |-
        <businessObjectDataStorageFilesCreateRequest>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionValue>2014-04-01</partitionValue>
          <subPartitionValues>
            <partitionValue>A</partitionValue>
            <partitionValue>B</partitionValue>
          </subPartitionValues>
          <businessObjectDataVersion>0</businessObjectDataVersion>
          <storageName>S3_MANAGED</storageName>
          <storageFiles>
            <storageFile>
              <filePath>app-a/exchange-a/new-orders/prc/gz/frmt-v0/data-v0/process-date=2014-04-01/exec-status=A/symbol=B/new_orders.2014-04-01.1.gz</filePath>
              <fileSizeBytes>9511</fileSizeBytes>
              <rowCount>1000</rowCount>
            </storageFile>
          </storageFiles>
        </businessObjectDataStorageFilesCreateRequest>
  businessObjectDataStorageFilesCreateResponse:
    allOf:
    - $ref: "#/definitions/businessObjectDataStorageFilesCreateRequest"
    example: |-
        <businessObjectDataStorageFilesCreateResponse>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <partitionValue>2014-04-01</partitionValue>
          <subPartitionValues>
            <partitionValue>A</partitionValue>
            <partitionValue>B</partitionValue>
          </subPartitionValues>
          <businessObjectDataVersion>0</businessObjectDataVersion>
          <storageName>S3_MANAGED</storageName>
          <storageFiles>
            <storageFile>
              <filePath>app-a/exchange-a/new-orders/prc/gz/frmt-v0/data-v0/process-date=2014-04-01/exec-status=A/symbol=B/new_orders.2014-04-01.1.gz</filePath>
              <fileSizeBytes>9511</fileSizeBytes>
              <rowCount>1000</rowCount>
            </storageFile>
          </storageFiles>
        </businessObjectDataStorageFilesCreateResponse>
  businessObjectDataVersion:
    description: The version of the business object data
    format: int32
    type: integer
  businessObjectDataVersions:
    example: |-
        <businessObjectDataVersions>
          <businessObjectDataVersion>
            <businessObjectDataKey>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <partitionValue>2014-04-01</partitionValue>
              <subPartitionValues>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </subPartitionValues>
              <businessObjectDataVersion>0</businessObjectDataVersion>
            </businessObjectDataKey>
            <status>VALID</status>
          </businessObjectDataVersion>
          <businessObjectDataVersion>
            <businessObjectDataKey>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <partitionValue>2014-04-01</partitionValue>
              <subPartitionValues>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </subPartitionValues>
              <businessObjectDataVersion>1</businessObjectDataVersion>
            </businessObjectDataKey>
            <status>VALID</status>
          </businessObjectDataVersion>
          <businessObjectDataVersion>
            <businessObjectDataKey>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>2</businessObjectFormatVersion>
              <partitionValue>2014-04-01</partitionValue>
              <subPartitionValues>
                <partitionValue>A</partitionValue>
                <partitionValue>B</partitionValue>
              </subPartitionValues>
              <businessObjectDataVersion>0</businessObjectDataVersion>
            </businessObjectDataKey>
            <status>VALID</status>
          </businessObjectDataVersion>
        </businessObjectDataVersions>
    items:
      $ref: "#/definitions/businessObjectDataKey"
    type: array
  businessObjectDefinition:
    allOf:
    - $ref: "#/definitions/businessObjectDefinitionCreateRequest"
    - required:
      - id
      type: object
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <businessObjectDefinition>
          <id>1</id>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <dataProviderName>EXCHANGE_A</dataProviderName>
          <description>New Orders</description>
          <attributes>
            <attribute>
              <name>test name</name>
              <value>test value</value>
            </attribute>
          </attributes>
        </businessObjectDefinition>
  businessObjectDefinitionCreateRequest:
    allOf:
    - $ref: "#/definitions/businessObjectDefinitionKey"
    - $ref: "#/definitions/businessObjectDefinitionUpdateRequest"
    - required:
      - dataProviderName
      type: object
      properties:
        dataProviderName:
          $ref: "#/definitions/dataProviderName"
    example: |-
        <businessObjectDefinitionCreateRequest>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <dataProviderName>EXCHANGE_A</dataProviderName>
          <description>New Orders</description>
          <attributes>
            <attribute>
              <name>test name</name>
              <value>test value</value>
            </attribute>
          </attributes>
        </businessObjectDefinitionCreateRequest>
  businessObjectDefinitionKey:
    properties:
      businessObjectDefinitionName:
        $ref: "#/definitions/businessObjectDefinitionName"
      namespace:
        $ref: "#/definitions/namespaceString"
    required:
    - businessObjectDefinitionName
    - namespace
  businessObjectDefinitionKeys:
    example: |-
        <businessObjectDefinitionKeys>
          <businessObjectDefinitionKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          </businessObjectDefinitionKey>
          <businessObjectDefinitionKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>PROCESS_ORDERS</businessObjectDefinitionName>
          </businessObjectDefinitionKey>
        </businessObjectDefinitionKeys>
    items:
      $ref: "#/definitions/businessObjectDefinitionKey"
    type: array
  businessObjectDefinitionName:
    description: The name of the business object definition
    example: NEW_ORDER
    type: string
  businessObjectDefinitionUpdateRequest:
    example: |-
        <businessObjectDefinitionUpdateRequest>
          <description>New Orders</description>
          <attributes>
            <attribute>
              <name>test name</name>
              <value>test value</value>
            </attribute>
          </attributes>
        </businessObjectDefinitionUpdateRequest>
    properties:
      attributes:
        $ref: "#/definitions/Attributes"
      description:
        $ref: "#/definitions/description"
    type: object
  businessObjectFormat:
    allOf:
    - $ref: "#/definitions/businessObjectFormatCreateRequest"
    - required:
      - id
      - latestVersion
      - businessObjectFormatVersion
      type: object
      properties:
        latestVersion:
          type: boolean
          description: A Y/N flag that shows whether this instance of format is the
            latest or not. Once a new version of format is registered, any previous
            versions will no longer be the latest
        businessObjectFormatVersion:
          $ref: "#/definitions/businessObjectFormatVersion"
        id:
          $ref: "#/definitions/id"
    example: |-
        <businessObjectFormat>
          <id>10902</id>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>A</businessObjectFormatUsage>
          <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
          <businessObjectFormatVersion>0</businessObjectFormatVersion>
          <latestVersion>true</latestVersion>
          <partitionKey>PROCESS_DATE</partitionKey>
          <description>New Orders</description>
          <attributeDefinitions>
            <attributeDefinition>
              <name>test name</name>
            </attributeDefinition>
          </attributeDefinitions>
          <schema>
            <columns>
              <column>
                <name>EXP_DATE</name>
                <type>DATE</type>
                <required>true</required>
                <description>This is a test column.</description>
              </column>
              <column>
                <name>TOTAL_PAYMENT</name>
                <type>DECIMAL</type>
                <size>18,8</size>
                <required>true</required>
                <defaultValue>0</defaultValue>
              </column>
            </columns>
            <partitions>
              <column>
                <name>PROCESS_DATE</name>
                <type>DATE</type>
                <required>true</required>
                <description>Process date.</description>
              </column>
            </partitions>
            <nullValue>\\N</nullValue>
            <delimiter>|</delimiter>
            <escapeCharacter>\\</escapeCharacter>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </schema>
        </businessObjectFormat>
  businessObjectFormatCreateRequest:
    allOf:
    - $ref: "#/definitions/formatKey"
    - required:
      - partitionKey
      type: object
      properties:
        partitionKey:
          $ref: "#/definitions/partitionKey"
        description:
          $ref: "#/definitions/description"
        attributeDefinitions:
          description: This will be a list of attribute definitions (for storage of
            metadata with objects) which are required to be specified when registering
            Business Object Data against this format. This list will define which
            metadata must be specified, but additional metadata can still be registered
            which is not specified in this list. The metadata (attributes) will allow
            applications to store custom data with registered data for use by consumers
            of the data
          $ref: "#/definitions/Attributes"
        schema:
          description: An optional schema associated with this business object format
          $ref: "#/definitions/Schema"
    example: |-
        <businessObjectFormatCreateRequest>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>A</businessObjectFormatUsage>
          <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
          <partitionKey>PROCESS_DATE</partitionKey>
          <description>New Orders</description>
          <attributeDefinitions>
            <attributeDefinition>
              <name>test name</name>
            </attributeDefinition>
          </attributeDefinitions>
          <schema>
            <columns>
              <column>
                <name>COLUMN1</name>
                <type>DATE</type>
                <required>true</required>
                <description>This is a test column.</description>
              </column>
              <column>
                <name>COLUMN2</name>
                <type>DECIMAL</type>
                <size>18,8</size>
                <required>true</required>
                <defaultValue>0</defaultValue>
              </column>
            </columns>
            <partitions>
              <column>
                <name>PROCESS_DATE</name>
                <type>DATE</type>
                <required>true</required>
                <description>Process date.</description>
              </column>
            </partitions>
            <nullValue>\\N</nullValue>
            <delimiter>|</delimiter>
            <escapeCharacter>\\</escapeCharacter>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </schema>
        </businessObjectFormatCreateRequest>
  businessObjectFormatDdl:
    allOf:
    - $ref: "#/definitions/businessObjectFormatDdlRequest"
    - required:
      - ddl
      type: object
      properties:
        ddl:
          $ref: "#/definitions/ddl"
    example: |-
        <businessObjectFormatDdl>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <outputFormat>HIVE_13_DDL</outputFormat>
          <tableName>NEW_ORDERS_PRC</tableName>
          <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
          <includeDropTableStatement>true</includeDropTableStatement>
          <ddl>![CDATA[ DROP TABLE IF EXISTS `NEW_ORDERS_PRC`;
                        CREATE EXTERNAL TABLE `NEW_ORDERS_PRC` ( columns )
                        PARTITIONED BY ( <pkey(s)> ) STORED AS ORC; ]]</ddl>
        </businessObjectFormatDdl>
  businessObjectFormatDdlCollectionRequest:
    properties:
      businessObjectFormatDdlRequests:
        $ref: "#/definitions/businessObjectFormatDdlRequests"
    required:
    - businessObjectFormatDdlRequests
    example: |-
        <businessObjectFormatDdlCollectionRequest>
          <businessObjectFormatDdlRequests>
            <businessObjectFormatDdlRequest>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <outputFormat>HIVE_13_DDL</outputFormat>
              <tableName>NEW_ORDERS_PRC</tableName>
              <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
              <includeDropTableStatement>true</includeDropTableStatement>
              <includeIfNotExistsOption>true</includeIfNotExistsOption>
            </businessObjectFormatDdlRequest>
          </businessObjectFormatDdlRequests>
        </businessObjectFormatDdlCollectionRequest>
  businessObjectFormatDdlCollectionResponse:
    properties:
      businessObjectFormatDdlResponses:
        $ref: "#/definitions/businessObjectFormatDdlResponses"
      ddlCollection:
        $ref: "#/definitions/ddlCollection"
    required:
    - businessObjectFormatDdlResponses
    - ddlCollection
    example: |-
        <businessObjectFormatDdlCollectionResponse>
          <businessObjectFormatDdlResponses>
            <businessObjectFormatDdl>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <outputFormat>HIVE_13_DDL</outputFormat>
              <tableName>NEW_ORDERS_PRC</tableName>
              <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
              <includeDropTableStatement>true</includeDropTableStatement>
              <includeIfNotExistsOption>true</includeIfNotExistsOption>
              <ddl>
              ![CDATA[ DROP TABLE IF EXISTS `NEW_ORDERS_PRC`;

                            CREATE EXTERNAL TABLE `NEW_ORDERS_PRC` ( columns )
                            PARTITIONED BY ( <pkey(s)> ) STORED AS ORC;
              ]]
              </ddl>
            </businessObjectFormatDdl>
          </businessObjectFormatDdlResponses>
          <ddlCollection>
          ![CDATA[ DROP TABLE IF EXISTS `NEW_ORDERS_PRC`;

                        CREATE EXTERNAL TABLE `NEW_ORDERS_PRC` ( columns )
                        PARTITIONED BY ( <pkey(s)> ) STORED AS ORC;
          ]]
          </ddlCollection>
        </businessObjectFormatDdlCollectionResponse>
  businessObjectFormatDdlRequest:
    allOf:
    - $ref: "#/definitions/formatKey"
    - required:
      - outputFormat
      - tableName
      type: object
      properties:
        includeDropTableStatement:
          $ref: "#/definitions/includeDropTableStatement"
        outputFormat:
          $ref: "#/definitions/outputFormat"
        customDdlName:
          $ref: "#/definitions/customDdlName"
        tableName:
          $ref: "#/definitions/tableName"
        includeIfNotExistsOption:
          $ref: "#/definitions/includeIfNotExistsOption"
    example: |-
        <businessObjectFormatDdlRequest>
          <namespace>APP_A</namespace>
          <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
          <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
          <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
          <businessObjectFormatVersion>1</businessObjectFormatVersion>
          <outputFormat>HIVE_13_DDL</outputFormat>
          <tableName>NEW_ORDERS_PRC</tableName>
          <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
          <includeDropTableStatement>true</includeDropTableStatement>
          <includeIfNotExistsOption>true</includeIfNotExistsOption>
        </businessObjectFormatDdlRequest>
  businessObjectFormatDdlRequests:
    example: |-
        <businessObjectFormatDdlRequests>
            <businessObjectFormatDdlRequest>
              <namespace>APP_A</namespace>
              <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
              <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
              <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
              <businessObjectFormatVersion>1</businessObjectFormatVersion>
              <outputFormat>HIVE_13_DDL</outputFormat>
              <tableName>NEW_ORDERS_PRC</tableName>
              <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
              <includeDropTableStatement>true</includeDropTableStatement>
              <includeIfNotExistsOption>true</includeIfNotExistsOption>
            </businessObjectFormatDdlRequest>
        </businessObjectFormatDdlRequests>
    items:
      $ref: "#/definitions/businessObjectFormatDdlRequest"
    type: array
  businessObjectFormatDdlResponses:
    example: |-
        <businessObjectFormatDdlResponses>
          <businessObjectFormatDdl>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <outputFormat>HIVE_13_DDL</outputFormat>
            <tableName>NEW_ORDERS_PRC</tableName>
            <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
            <includeDropTableStatement>true</includeDropTableStatement>
            <includeIfNotExistsOption>true</includeIfNotExistsOption>
            <ddl>
            ![CDATA[ DROP TABLE IF EXISTS `NEW_ORDERS_PRC`;
       
                          CREATE EXTERNAL TABLE `NEW_ORDERS_PRC` ( columns )
                          PARTITIONED BY ( <pkey(s)> ) STORED AS ORC;
            ]]
            </ddl>
          </businessObjectFormatDdl>
        </businessObjectFormatDdlResponses>
    items:
      $ref: "#/definitions/businessObjectFormatDdl"
    type: array
  businessObjectFormatFileType:
    description: The business object format file type
    example: BZ
    type: string
  businessObjectFormatKey:
    allOf:
    - $ref: "#/definitions/formatKey"
    - required:
      - businessObjectFormatVersion
      type: object
      properties:
        businessObjectFormatVersion:
          $ref: "#/definitions/businessObjectFormatVersion"
  businessObjectFormatKeys:
    example: |-
        <businessObjectFormatKeys>
          <businessObjectFormatKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>A</businessObjectFormatUsage>
            <businessObjectFormatFileType>ORC</businessObjectFormatFileType>
            <businessObjectFormatVersion>0</businessObjectFormatVersion>
          </businessObjectFormatKey>
        </businessObjectFormatKeys>
    items:
      $ref: "#/definitions/businessObjectFormatKey"
    type: array
  businessObjectFormatUpdateRequest:
    allOf:
    - $ref: "#/definitions/businessObjectFormatCreateRequest"
    example: |-
        <businessObjectFormatUpdateRequest>
          <description>New Orders</description>
          <schema>
            <columns>
              <column>
                <name>COLUMN1</name>
                <type>DATE</type>
                <required>true</required>
                <description>This is a test column</description>
              </column>
              <column>
                <name>COLUMN2</name>
                <type>DECIMAL</type>
                <size>18,8</size>
                <required>true</required>
                <defaultValue>0</defaultValue>
              </column>
            </columns>
            <partitions>
              <column>
                <name>PROCESS_DATE</name>
                <type>DATE</type>
                <required>true</required>
                <description>Process date.</description>
              </column>
            </partitions>
            <nullValue>\\N</nullValue>
            <delimiter>|</delimiter>
            <escapeCharacter>\\</escapeCharacter>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </schema>
        </businessObjectFormatUpdateRequest>
  businessObjectFormatUsage:
    description: The business object format usage
    example: PRC
    type: string
  businessObjectFormatVersion:
    description: The version of the business object format
    format: int32
    type: integer
  column:
    properties:
      defaultValue:
        $ref: "#/definitions/defaultValue"
      name:
        description: The name of the schema column
        type: string
      required:
        $ref: "#/definitions/required"
      size:
        $ref: "#/definitions/size"
      type:
        $ref: "#/definitions/type"
    required:
    - name
    - type
  Columns:
    items:
      $ref: "#/definitions/column"
    type: array
  continueOnError:
    default: false
    description: 'Action on step failure, true: continue, false: cancel'
    type: boolean
  correlationData:
    description: The information to be passed along with the notification action (up
      to 4kb)
    type: string
  createNewVersion:
    description: If true, a new business object data version will be created and registered. If false, then only an initial business object data version (v0) is allowed to be registered.
    default: false
    type: boolean
  customDdl:
    allOf:
    - $ref: "#/definitions/customDdlCreateRequest"
    - required:
      - id
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <customDdl>
          <id>10902</id>
          <customDdlKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
          </customDdlKey>
          <ddl>![CDATA[ CREATE EXTERNAL TABLE `${table.name}` (columns...) PARTITIONED BY ( <pkey(s)> ) STORED AS ORC;]]</ddl>
        </customDdl>
  customDdlCreateRequest:
    example: |-
        <customDdlCreateRequest>
          <customDdlKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
          </customDdlKey>
          <ddl>![CDATA[ CREATE EXTERNAL TABLE `${table.name}` (columns...) PARTITIONED BY ( <pkey(s)> ) STORED AS ORC;]]</ddl>
        </customDdlCreateRequest>
    properties:
      customDdlKey:
        $ref: "#/definitions/customDdlKey"
      ddl:
        $ref: "#/definitions/ddl"
    required:
    - customDdlKey
    - ddl
  customDdlKey:
    allOf:
    - $ref: "#/definitions/businessObjectFormatKey"
    - required:
      - customDdlName
      type: object
      properties:
        customDdlName:
          $ref: "#/definitions/customDdlName"
  customDdlKeys:
    example: |-
        <customDdlKeys>
          <customDdlKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <customDdlName>NEW_ORDERS_HIVE_13</customDdlName>
          </customDdlKey>
          <customDdlKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>NEW_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>PRC</businessObjectFormatUsage>
            <businessObjectFormatFileType>GZ</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <customDdlName>PATTERNS_NEW_ORDERS_HIVE_13</customDdlName>
          </customDdlKey>
        </customDdlKeys>
    properties:
      customDdlKeys:
        items:
          $ref: "#/definitions/customDdlKey"
        type: array
    required:
    - customDdlKeys
  customDdlName:
    description: The name of the custom DDL
    type: string
  customDdlUpdateRequest:
    example: |-
        <customDdlUpdateRequest>
          <ddl>![CDATA[ CREATE EXTERNAL TABLE `${table.name}` (columns...) PARTITIONED BY (<pkey(s)>) STORED AS ORC; ]]</ddl>
        </customDdlUpdateRequest>
    properties:
      ddl:
        $ref: "#/definitions/ddl"
    required:
    - ddl
  dataProviderName:
    description: The name of a valid data provider known by the system
    type: string
  ddl:
    description: A wrapper for the DDL code
    type: string
  ddlCollection:
    description: A wrapper for the DDL code generated for the entire collection of business object formats or business object data
    type: string
  defaultValue:
    description: The default value for the schema column
    type: string
  delimiter:
    description: The field delimiter (e.g. "|").  Please note that a field delimiter
      is allowed to be a whitespace character. XML escaping should be used when specifying
      non-ASCII characters (e.g. &#x1).
    type: string
  description:
    description: An optional description of the definition
    type: string
  directoryPath:
    type: string
  discoverStorageFiles:
    description: Enables the auto-discovery of all storage files in the relative S3 storage under the specified storage directory.
    default: false
    type: boolean
  downloadSingleInitiationResponse:
    example: |-
        <downloadSingleInitiationResponse>
          <businessObjectData>
            <id>10569</id>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>PROCESS_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>UPLD</businessObjectFormatUsage>
            <businessObjectFormatFileType>ATCHM</businessObjectFormatFileType>
            <businessObjectFormatVersion>1</businessObjectFormatVersion>
            <partitionKey>UUID</partitionKey>
            <partitionValue>54947df8-0e9e-4471-a2f9-9af509fb5889</partitionValue>
            <version>0</version>
            <latestVersion>true</latestVersion>
            <status>VALID</status>
            <storageUnits>
              <storageUnit>
                <storage>
                  <name>S3_MANAGED_EXTERNAL</name>
                  <storagePlatformName>S3</storagePlatformName>
                  <attributes>
                    <attribute>
                      <name>bucket.name</name>
                      <value>1234-5678-3456-external</value>
                    </attribute>
                    <attribute>
                      <name>s3.endpoint</name>
                      <value>s3-external-1.amazonaws.com</value>
                    </attribute>
                  </attributes>
                </storage>
                <storageDirectory>
                  <directoryPath>app-a/54947df8-0e9e-4471-a2f9-9af509fb5889</directoryPath>
                </storageDirectory>
                <storageFiles>
                  <storageFile>
                    <filePath>app-a/54947df8-0e9e-4471-a2f9-9af509fb5889/Report.doc</filePath>
                    <fileSizeBytes>56789</fileSizeBytes>
                  </storageFile>
                </storageFiles>
              </storageUnit>
            </storageUnits>
            <attributes>
              <attribute>
                <name>test name</name>
                <value>test value</value>
              </attribute>
            </attributes>
            <businessObjectDataParents />
            <businessObjectDataChildren />
          </businessObjectData>
          <awsAccessKey>exampleAccessKey</awsAccessKey>
          <awsSecretKey>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</awsSecretKey>
          <awsSessionToken>AQoDYXdzEJr...</awsSessionToken>
          <awsSessionExpirationTime>2015-05-13T11:35:32.000-04:00</awsSessionExpirationTime>
        </downloadSingleInitiationResponse>
    properties:
      awsAccessKey:
        $ref: "#/definitions/awsAccessKey"
      awsSecretKey:
        $ref: "#/definitions/awsSecretKey"
      awsSessionExpirationTime:
        $ref: "#/definitions/awsSessionExpirationTime"
      awsSessionToken:
        $ref: "#/definitions/awsSessionToken"
      businessObjectData:
        $ref: "#/definitions/businessObjectData"
    required:
    - awsAccessKey
    - awsSecretKey
    - awsSessionExpirationTime
    - awsSessionToken
    - businessObjectData
    type: object
  dryRun:
    default: false
    description: When set to true, the request and override will be simulated and
      the cluster will not be created.  This flag should be set to true to test the
      override parameters.  Please note that the dry run validation does not make
      any calls to AWS. The dry run may be successful, but it may still fail during
      the call to AWS
    type: boolean
  emrCluster:
    allOf:
    - $ref: "#/definitions/emrClusterDefinitionKey"
    - required:
      - emrClusterName
      - id
      properties:
        status:
          description: The status of EMR Cluster
          $ref: "#/definitions/stepStatus"
        emrClusterDefinition:
          description: The cluster definition that was used to create the cluster.
            This definition will contain the parameters after the override happened.
            This element will be missing if the cluster was not created for a non-dry
            run. Dry runs will always return this element
          $ref: "#/definitions/emrClusterDefinition"
        emrClusterCreated:
          $ref: "#/definitions/emrClusterCreated"
        id:
          $ref: "#/definitions/id"
        emrClusterName:
          $ref: "#/definitions/emrClusterName"
    example: |-
        <emrCluster>
          <id>j-3NYLE4BW2TU2N</id>
          <status>BOOTSTRAPING</status>
          <namespace>APP_A</namespace>
          <emrClusterDefinitionName>DMTestClusterMinArgs</emrClusterDefinitionName>
          <emrClusterName>DM_Test_Cluster</emrClusterName>
          <emrClusterCreated>false</emrClusterCreated>
          <dryRun>true</dryRun>
          <emrClusterDefinition />
        </emrCluster>
  emrClusterCreated:
    description: True if EMR cluster was created, false if no cluster was created.
      Cluster will not be created if it already exists. This flag will always return
      false if dryRun flag was true
    type: boolean
  emrClusterCreateRequest:
    allOf:
    - $ref: "#/definitions/emrClusterDefinitionKey"
    - required:
      - emrClusterName
      properties:
        emrClusterDefinitionOverride:
          description: |-
            The parameters to override from the existing definition.
            * If any element is given, the definition parameter will be overridden with the value of the element.
            *  ex. If <amiVersion>3.1.0</amiVersion> is given, the AMI version will be overridden to 3.1.0.
            * If an element is given, but is empty, the parameter will be set to empty.
            *  ex. If <amiVersion /> is given, the AMI version will be set to empty in the definition parameter.
            * For nested elements, the entire content will be overridden with the given value.
            * If no element is specified, the definition parameter will not be overridden.

            Note:

            * <hadoopConfigurations> will only be overridden when <configurationFiles> and/or <keyValuePairConfigurations> is given.
                When either of them are given, and is empty, both <configurationFiles> and <keyValuePairConfigurations> will be cleared
          $ref: "#/definitions/emrClusterDefinitionOverride"
        dryRun:
          $ref: "#/definitions/dryRun"
        emrClusterName:
          $ref: "#/definitions/emrClusterName"
    example: |-
        <emrClusterCreateRequest>
          <namespace>APP_A</namespace>
          <emrClusterDefinitionName>DMTestClusterMinArgs</emrClusterDefinitionName>
          <emrClusterName>DM_Test_Cluster</emrClusterName>
          <dryRun>true</dryRun>
          <emrClusterDefinitionOverride>...</emrClusterDefinitionOverride>
        </emrClusterCreateRequest>
  emrClusterDefinition:
    properties:
      sshKeyPairName:
        $ref: "#/definitions/sshKeyPairName"
      subnetId:
        $ref: "#/definitions/subnetId"
  emrClusterDefinitionCreateRequest:
    example: |-
        <emrClusterDefinitionCreateRequest>
          <emrClusterDefinitionKey>
            <namespace>APP_A</namespace>
            <emrClusterDefinitionName>DMTestClusterMinArgs</emrClusterDefinitionName>
          </emrClusterDefinitionKey>
          <emrClusterDefinition />
        </emrClusterDefinitionCreateRequest>
    properties:
      emrClusterDefinition:
        $ref: "#/definitions/emrClusterDefinition"
      emrClusterDefinitionKey:
        $ref: "#/definitions/emrClusterDefinitionKey"
    required:
    - emrClusterDefinition
    - emrClusterDefinitionKey
  emrClusterDefinitionInformation:
    example: |-
        <emrClusterDefinitionInformation>
          <id>10902</id>
          <emrClusterDefinitionKey>
            <namespace>APP_A</namespace>
            <emrClusterDefinitionName>DMTestClusterMinArgs</emrClusterDefinitionName>
          </emrClusterDefinitionKey>
          <emrClusterDefinition />
        </emrClusterDefinitionInformation>
    properties:
      emrClusterDefinition:
        $ref: "#/definitions/emrClusterDefinition"
      emrClusterDefinitionKey:
        $ref: "#/definitions/emrClusterDefinitionKey"
      id:
        $ref: "#/definitions/id"
    required:
    - emrClusterDefinition
    - emrClusterDefinitionKey
    - id
  emrClusterDefinitionKey:
    properties:
      emrClusterDefinitionName:
        $ref: "#/definitions/emrClusterDefinitionName"
      namespace:
        $ref: "#/definitions/namespaceString"
    required:
    - emrClusterDefinitionName
    - namespace
  emrClusterDefinitionName:
    description: The name of EMR definition
    type: string
  emrClusterDefinitionOverride: {}
  emrClusterDefinitionUpdateRequest:
    example: |-
        <emrClusterDefinitionUpdateRequest>
          <emrClusterDefinition>...</emrClusterDefinition>
        </emrClusterDefinitionUpdateRequest>
    properties:
      emrClusterDefinition:
        $ref: "#/definitions/emrClusterDefinition"
    required:
    - emrClusterDefinition
  emrClusterName:
    description: The name of EMR cluster
    type: string
  emrClusterStatus:
    allOf:
    - $ref: "#/definitions/emrCluster"
    - required:
      - activeStep
      properties:
        activeStep:
          description: details of active step on the cluster
          $ref: "#/definitions/Step"
        oozieWorkflowJobs:
          items:
            $ref: "#/definitions/oozieWorkflowJobStatus"
          type: array
          description: Oozie workflow job details
        step:
          description: details of step that was requested
          $ref: "#/definitions/Step"
    example: |-
        <emrCluster>
          <id>j-3NYLE4BW2TU2N</id>
          <status>RUNNING</status>
          <namespace>APP_A</namespace>
          <emrClusterDefinitionName>DMTestClusterMinArgs</emrClusterDefinitionName>
          <emrClusterName>DM_Test_Cluster</emrClusterName>
          <activeStep>
            <id>s-3TJHTU3CIFSUG</id>
            <stepName>testDMCopy</stepName>
            <jarLocation>s3://us-east-1.elasticmapreduce/libs/script-runner/script-runner.jar</jarLocation>
            <scriptArguments>
              <argument>s3://1234-5678-3456-managed/app-a/test/test_script.sh</argument>
              <argument>arg1</argument>
              <argument>arg2</argument>
            </scriptArguments>
            <continueOnError>Continue</continueOnError>
            <status>Running</status>
          </activeStep>
          <step>
            <id>s-3TJHTU3CIFSUG</id>
            <stepName>testDMSetup</stepName>
            <jarLocation>s3://us-east-1.elasticmapreduce/libs/script-runner/script-runner.jar</jarLocation>
            <scriptArguments>
              <argument>s3://1234-5678-3456-managed/app-a/test/test_script.sh</argument>
              <argument>arg1</argument>
              <argument>arg2</argument>
            </scriptArguments>
            <continueOnError>Continue</continueOnError>
            <status>Completed</status>
          </step>
        </emrCluster>
  emrHadoopJarStepAddRequest:
    allOf:
    - $ref: "#/definitions/emrStep"
    - properties:
        jarLocation:
          $ref: "#/definitions/jarLocation"
        mainClass:
          $ref: "#/definitions/mainClass"
    example: |-
        <emrHadoopJarStepAddRequest>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <stepName />
          <jarLocation />
          <mainClass />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrHadoopJarStepAddRequest>
  emrHadoopStep:
    allOf:
    - $ref: "#/definitions/emrHadoopJarStepAddRequest"
    - required:
      - id
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <emrHadoopStep>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <id />
          <stepName />
          <jarLocation />
          <mainClass />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrHadoopStep>
  emrHiveStep:
    allOf:
    - $ref: "#/definitions/emrShellStep"
    example: |-
        <emrHiveStep>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <id />
          <stepName />
          <scriptLocation />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrHiveStep>
  emrHiveStepAddRequest:
    allOf:
    - $ref: "#/definitions/emrShellStepAddRequest"
    example: |-
        <emrHiveStepAddRequest>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <stepName />
          <scriptLocation />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrHiveStepAddRequest>
  emrMasterSecurityGroup:
    allOf:
    - $ref: "#/definitions/emrClusterDefinitionKey"
    - required:
      - emrClusterName
      - securityGroupIds
      properties:
        emrClusterName:
          $ref: "#/definitions/emrClusterName"
        securityGroupIds:
          items:
            type: string
          type: array
          description: Security groups id's
    example: |-
        <emrMasterSecurityGroup>
          <namespace>APP_A</namespace>
          <emrClusterDefinitionName>DMTestClusterMinArgs</emrClusterDefinitionName>
          <emrClusterName>DM_Test_Cluster</emrClusterName>
          <securityGroupIds>
            <securityGroupId>sg-f03d5295</securityGroupId>
          </securityGroupIds>
        </emrMasterSecurityGroup>
  emrMasterSecurityGroupAddRequest:
    allOf:
    - $ref: "#/definitions/emrMasterSecurityGroup"
    example: |-
        <emrMasterSecurityGroupAddRequest>
          <namespace>APP_A</namespace>
          <emrClusterDefinitionName>DMTestClusterMinArgs</emrClusterDefinitionName>
          <emrClusterName>DM_Test_Cluster</emrClusterName>
          <securityGroupIds>
            <securityGroupId>sg-f03d5295</securityGroupId>
          </securityGroupIds>
        </emrMasterSecurityGroupAddRequest>
  emrOozieStep:
    allOf:
    - $ref: "#/definitions/emrHadoopJarStepAddRequest"
    - required:
      - id
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <emrOozieStep>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <id />
          <stepName />
          <workflowXmlLocation />
          <ooziePropertiesFileLocation />
          <continueOnError />
        </emrOozieStep>
  emrOozieStepAddRequest:
    allOf:
    - $ref: "#/definitions/emrStep"
    - properties:
        ooziePropertiesFileLocation:
          $ref: "#/definitions/ooziePropertiesFileLocation"
        workflowXmlLocation:
          $ref: "#/definitions/workflowXmlLocation"
    example: |-
        <emrOozieStepAddRequest>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <stepName />
          <workflowXmlLocation />
          <ooziePropertiesFileLocation />
          <continueOnError />
        </emrOozieStepAddRequest>
  emrPigStep:
    allOf:
    - $ref: "#/definitions/emrShellStep"
    example: |-
        <emrPigStep>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <id />
          <stepName />
          <scriptLocation />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrPigStep>
  emrPigStepAddRequest:
    allOf:
    - $ref: "#/definitions/emrShellStepAddRequest"
    example: |-
        <emrPigStepAddRequest>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <stepName />
          <scriptLocation />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrPigStepAddRequest>
  emrShellStep:
    allOf:
    - $ref: "#/definitions/emrShellStepAddRequest"
    - required:
      - id
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <emrShellStep>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <id />
          <stepName />
          <scriptLocation />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrShellStep>
  emrShellStepAddRequest:
    allOf:
    - $ref: "#/definitions/emrStep"
    - properties:
        scriptLocation:
          $ref: "#/definitions/scriptLocation"
        scriptArguments:
          items:
            type: string
          type: array
    example: |-
        <emrShellStepAddRequest>
          <namespace />
          <emrClusterDefinitionName />
          <emrClusterName />
          <stepName />
          <scriptLocation />
          <scriptArguments>
            <argument />
          </scriptArguments>
          <continueOnError />
        </emrShellStepAddRequest>
  emrStep:
    allOf:
    - $ref: "#/definitions/emrClusterDefinitionKey"
    - required:
      - emrClusterName
      properties:
        continueOnError:
          $ref: "#/definitions/continueOnError"
        stepName:
          $ref: "#/definitions/stepName"
        emrClusterName:
          $ref: "#/definitions/emrClusterName"
  endPartitionValue:
    description: The end partition value for the partition value range
    type: string
  endTime:
    type: string
  Error:
    properties:
      message:
        $ref: "#/definitions/message"
      messageDetails:
        items:
          type: string
        type: array
      statusCode:
        $ref: "#/definitions/statusCode"
      statusDescription:
        $ref: "#/definitions/statusDescription"
    required:
    - statusCode
  errorMessage:
    type: string
  errorStackTrace:
    type: string
  escapeCharacter:
    description: The escape character (e.g. "\"). XML escaping should be used when
      specifying non-ASCII characters
    type: string
  expectedPartitionValue:
    description: The expected partition value
    type: string
  expectedPartitionValueInformation:
    example: |-
        <expectedPartitionValueInformation>
          <expectedPartitionValueKey>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
            <expectedPartitionValue>2014-12-01</expectedPartitionValue>
          </expectedPartitionValueKey>
        </expectedPartitionValueInformation>
    properties:
      expectedPartitionValueKey:
        $ref: "#/definitions/expectedPartitionValueKey"
    required:
    - expectedPartitionValueKey
  expectedPartitionValueKey:
    properties:
      expectedPartitionValue:
        $ref: "#/definitions/expectedPartitionValue"
      partitionKeyGroupName:
        $ref: "#/definitions/partitionKeyGroupName"
    required:
    - expectedPartitionValue
    - partitionKeyGroupName
  expectedPartitionValuesCreateRequest:
    allOf:
    - $ref: "#/definitions/expectedPartitionValuesInformation"
    example: |-
        <expectedPartitionValuesCreateRequest>
          <partitionKeyGroupKey>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </partitionKeyGroupKey>
          <expectedPartitionValues>
            <expectedPartitionValue>2014-12-01</expectedPartitionValue>
            <expectedPartitionValue>2014-12-02</expectedPartitionValue>
          </expectedPartitionValues>
        </expectedPartitionValuesCreateRequest>
  expectedPartitionValuesDeleteRequest:
    allOf:
    - $ref: "#/definitions/expectedPartitionValuesInformation"
    example: |-
        <expectedPartitionValuesDeleteRequest>
          <partitionKeyGroupKey>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </partitionKeyGroupKey>
          <expectedPartitionValues>
            <expectedPartitionValue>2014-12-01</expectedPartitionValue>
            <expectedPartitionValue>2014-12-02</expectedPartitionValue>
          </expectedPartitionValues>
        </expectedPartitionValuesDeleteRequest>
  expectedPartitionValuesInformation:
    example: |-
        <expectedPartitionValuesInformation>
          <partitionKeyGroupKey>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </partitionKeyGroupKey>
          <expectedPartitionValues>
            <expectedPartitionValue>2014-12-01</expectedPartitionValue>
            <expectedPartitionValue>2014-12-02</expectedPartitionValue>
          </expectedPartitionValues>
        </expectedPartitionValuesInformation>
    properties:
      expectedPartitionValues:
        description: List of expected partition values
        items:
          type: string
        type: array
      partitionKeyGroupKey:
        $ref: "#/definitions/partitionKeyGroupName"
    required:
    - expectedPartitionValues
    - partitionKeyGroupKey
  File:
    properties:
      fileName:
        $ref: "#/definitions/fileName"
      fileSizeBytes:
        $ref: "#/definitions/fileSizeBytes"
    required:
    - fileName
    type: object
  fileName:
    description: The name of the file to be uploaded
    type: string
  filePath:
    type: string
  fileSizeBytes:
    description: The size of the file
    format: int64
    type: integer
  fileTypeCode:
    description: The file type code
    type: string
  fileTypeKey:
    properties:
      fileTypeCode:
        $ref: "#/definitions/fileTypeCode"
    required:
    - fileTypeCode
  fileTypeKeys:
    example: |-
        <fileTypeKeys>
          <fileTypeKey>
            <fileTypeCode>BZ</fileTypeCode>
          </fileTypeKey>
          <fileTypeKey>
            <fileTypeCode>GZ</fileTypeCode>
          </fileTypeKey>
        </fileTypeKeys>
    items:
      $ref: "#/definitions/fileTypeKey"
    type: array
  formatKey:
    properties:
      businessObjectDefinitionName:
        $ref: "#/definitions/businessObjectDefinitionName"
      businessObjectFormatFileType:
        $ref: "#/definitions/businessObjectFormatFileType"
      businessObjectFormatUsage:
        $ref: "#/definitions/businessObjectFormatUsage"
      namespace:
        $ref: "#/definitions/namespaceString"
    required:
    - businessObjectDefinitionName
    - businessObjectFormatFileType
    - businessObjectFormatUsage
    - namespace
  id:
    description: The internal Id that uniquely references this entity
    format: int32
    type: integer
  includeDropTableStatement:
    default: false
    description: If true, drop table statement for existing table will be added to
      the generated DDL
    type: boolean
  includeIfNotExistsOption:
    default: false
    description: If true, IF NOT EXISTS option will be added to the CREATE TABLE ...
      statement in the generated DDL. Please note that this parameter value has no
      effect on the relative CREATE TABLE ... statement, if generated DDL uses custom
      DDL
    type: boolean
  jarLocation:
    description: Location of the JAR file
    type: string
  job:
    allOf:
    - $ref: "#/definitions/jobCreateRequest"
    - required:
      - id
      type: object
      properties:
        workflowErrors:
          description: Execution errors
          $ref: "#/definitions/WorkflowErrors"
        parameters:
          $ref: "#/definitions/parameters"
        activitiJobXml:
          $ref: "#/definitions/activitiJobXml"
        currentWorkflowStep:
          description: Current step
          $ref: "#/definitions/WorkflowStep"
        completedWorkflowSteps:
          description: Completed steps
          $ref: "#/definitions/WorkflowSteps"
        id:
          $ref: "#/definitions/id"
    example: |-
        <job>
          <id>1</id>
          <namespace />
          <jobName />
          <parameters>
            <parameter>
              <name>key1</name>
              <value>value1</value>
            </parameter>
            <parameter>
              <name>key2</name>
              <value>value1</value>
            </parameter>
          </parameters>
        </job>
  JobAction:
    properties:
      correlationData:
        $ref: "#/definitions/correlationData"
      jobName:
        $ref: "#/definitions/jobName"
      namespace:
        $ref: "#/definitions/namespaceString"
    required:
    - jobName
    - namespace
  jobActions:
    properties:
      jobAction:
        items:
          $ref: "#/definitions/JobAction"
        type: array
    required:
    - jobAction
  jobCreateRequest:
    example: |-
        <jobCreateRequest>
          <namespace />
          <jobName />
          <parameters>
            <parameter>
              <name>key1</name>
              <value>value1</value>
            </parameter>
            <parameter>
              <name>key2</name>
              <value>value1</value>
            </parameter>
          </parameters>
        </jobCreateRequest>
    properties:
      jobName:
        $ref: "#/definitions/jobName"
      namespace:
        $ref: "#/definitions/namespaceString"
      parameters:
        $ref: "#/definitions/parameters"
        description: List of key/value pairs that will be made available to the job
          when it is executed. These parameters will override any parameters defined
          as part of the job definition
    required:
    - jobName
    - namespace
  jobDefinition:
    allOf:
    - $ref: "#/definitions/jobDefinitionCreateRequest"
    - required:
      - id
      type: object
      properties:
        id:
          $ref: "#/definitions/id"
    example: |-
        <jobDefinition>
          <id>12345</id>
          <namespace />
          <jobName />
          <description />
          <activitiJobXml />
          <parameters>
            <parameter>
              <name>key1</name>
              <value>value1</value>
            </parameter>
            <parameter>
              <name>key2</name>
              <value>value1</value>
            </parameter>
          </parameters>
        </jobDefinition>
  jobDefinitionCreateRequest:
    allOf:
    - $ref: "#/definitions/jobDefinitionUpdateRequest"
    - required:
      - namespace
      - jobName
      type: object
      properties:
        namespace:
          $ref: "#/definitions/namespaceString"
        jobName:
          $ref: "#/definitions/jobName"
    example: |-
        <jobDefinitionCreateRequest>
          <namespace>APP_A</namespace>
          <jobName>sampleWorkflow</jobName>
          <description>Test workflow</description>
          <activitiJobXml>
            ![CDATA[<?xml version="1.0" encoding="UTF-8"?>
            <definitions
              xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xmlns:activiti="http://activiti.org/bpmn"
              xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
              xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC"
              xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI"
              xmlns:xsd="http://www.w3.org/2001/XMLSchema"
              typeLanguage="http://www.w3.org/2001/XMLSchema"
              expressionLanguage="http://www.w3.org/1999/XPath"
              targetNamespace="http://www.activiti.org/test">
             <process id="app-a.sampleWorkflow" name="app-a.sampleWorkflow" isExecutable="true">
              <startEvent id="startevent1" name="Start">
               <extensionElements>
                <activiti:formProperty id="param1" name="param1" type="string" default="test1"></activiti:formProperty>
                <activiti:formProperty id="param2" name="param2" type="string" default="test2"></activiti:formProperty>
               </extensionElements>
              </startEvent>
              <sequenceFlow id="flow1" sourceRef="startevent1" targetRef="usertask1"></sequenceFlow>
              <endEvent id="endevent1" name="End"></endEvent>
              <sequenceFlow id="flow2" sourceRef="usertask1" targetRef="endevent1"></sequenceFlow>
              <userTask id="usertask1" name="Sample Task" activiti:candidateGroups="management">
               <extensionElements>
                <activiti:formProperty id="userInput1" name="userInput1" type="string"></activiti:formProperty>
               </extensionElements>
              </userTask>
             </process>
             <bpmndi:BPMNDiagram id="BPMNDiagram_qa3DMWorkflow">
              <bpmndi:BPMNPlane bpmnElement="qa3DMWorkflow" id="BPMNPlane_qa3DMWorkflow">
              <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
               <omgdc:Bounds height="35.0" width="35.0" x="70.0" y="80.0"></omgdc:Bounds>
              </bpmndi:BPMNShape>
              <bpmndi:BPMNShape bpmnElement="endevent1" id="BPMNShape_endevent1">
               <omgdc:Bounds height="35.0" width="35.0" x="320.0" y="80.0"></omgdc:Bounds>
              </bpmndi:BPMNShape>
              <bpmndi:BPMNShape bpmnElement="usertask1" id="BPMNShape_usertask1">
               <omgdc:Bounds height="55.0" width="105.0" x="170.0" y="70.0"></omgdc:Bounds>
              </bpmndi:BPMNShape>
              <bpmndi:BPMNEdge bpmnElement="flow1" id="BPMNEdge_flow1">
               <omgdi:waypoint x="105.0" y="97.0"></omgdi:waypoint>
               <omgdi:waypoint x="170.0" y="97.0"></omgdi:waypoint>
              </bpmndi:BPMNEdge>
              <bpmndi:BPMNEdge bpmnElement="flow2" id="BPMNEdge_flow2">
               <omgdi:waypoint x="275.0" y="97.0"></omgdi:waypoint>
               <omgdi:waypoint x="320.0" y="97.0"></omgdi:waypoint>
              </bpmndi:BPMNEdge>
              </bpmndi:BPMNPlane>
              </bpmndi:BPMNDiagram>
              </definitions> ]]
          </activitiJobXml>
          <parameters>
            <parameter>
              <name>key1</name>
              <value>value1</value>
            </parameter>
            <parameter>
              <name>key2</name>
              <value>value1</value>
            </parameter>
          </parameters>
        </jobDefinitionCreateRequest>
  jobDefinitionUpdateRequest:
    example: |-
        <jobDefinitionUpdateRequest>
          <description />
          <activitiJobXml>
            ![CDATA[<?xml version="1.0" encoding="UTF-8"?>
            <definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL"
                         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                         xmlns:activiti="http://activiti.org/bpmn"
                         xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
                         xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC"
                         xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI"
                         xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                         typeLanguage="http://www.w3.org/2001/XMLSchema"
                         expressionLanguage="http://www.w3.org/1999/XPath"
                         targetNamespace="http://www.activiti.org/test">
            <process id="app.sampleDMWorkflow"  name="app.sampleDMWorkflow" isExecutable="true">
             <startEvent id="startevent1" name="Start">
              <extensionElements>
               <activiti:formProperty id="param1" name="param1" type="string" default="test1"></activiti:formProperty>
               <activiti:formProperty id="param2" name="param2" type="string" default="test2"></activiti:formProperty>
              </extensionElements>
             </startEvent>
             <sequenceFlow id="flow1" sourceRef="startevent1" targetRef="usertask1"></sequenceFlow>
             <endEvent id="endevent1" name="End"></endEvent>
             <sequenceFlow id="flow2" sourceRef="usertask1" targetRef="endevent1">
             </sequenceFlow>
             <userTask id="usertask1" name="Sample Task" activiti:candidateGroups="management">
              <extensionElements>
               <activiti:formProperty id="userInput1" name="userInput1" type="string"></activiti:formProperty>
              </extensionElements>
             </userTask>
            </process>
            <bpmndi:BPMNDiagram id="BPMNDiagram_qa3DMWorkflow">
              <bpmndi:BPMNPlane bpmnElement="qa3DMWorkflow" id="BPMNPlane_qa3DMWorkflow">
                <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
                 <omgdc:Bounds height="35.0" width="35.0" x="70.0" y="80.0"></omgdc:Bounds>
                </bpmndi:BPMNShape>
                <bpmndi:BPMNShape bpmnElement="endevent1" id="BPMNShape_endevent1">
                 <omgdc:Bounds height="35.0" width="35.0" x="320.0" y="80.0"></omgdc:Bounds>
                </bpmndi:BPMNShape>
                <bpmndi:BPMNShape bpmnElement="usertask1" id="BPMNShape_usertask1">
                 <omgdc:Bounds height="55.0" width="105.0" x="170.0" y="70.0"></omgdc:Bounds>
                </bpmndi:BPMNShape>
                <bpmndi:BPMNEdge bpmnElement="flow1" id="BPMNEdge_flow1">
                 <omgdi:waypoint x="105.0" y="97.0"></omgdi:waypoint>
                 <omgdi:waypoint x="170.0" y="97.0"></omgdi:waypoint>
                </bpmndi:BPMNEdge>
                <bpmndi:BPMNEdge bpmnElement="flow2" id="BPMNEdge_flow2">
                 <omgdi:waypoint x="275.0" y="97.0"></omgdi:waypoint>
                 <omgdi:waypoint x="320.0" y="97.0"></omgdi:waypoint>
                </bpmndi:BPMNEdge>
              </bpmndi:BPMNPlane>
            </bpmndi:BPMNDiagram>
            </definitions>]]
          </activitiJobXml>
          <parameters>
            <parameter>
              <name>key1</name>
              <value>value1</value>
            </parameter>
            <parameter>
              <name>key2</name>
              <value>value1</value>
            </parameter>
          </parameters>
        </jobDefinitionUpdateRequest>
    properties:
      activitiJobXml:
        $ref: "#/definitions/activitiJobXml"
      description:
        $ref: "#/definitions/description"
      parameters:
        $ref: "#/definitions/parameters"
        description: Default list of key/value pairs that will be made available to
          the job when it is executed. These values can be overridden by parameters
          specified during the job execution
    required:
    - activitiJobXml
  jobName:
    description: The name of the job definition
    type: string
  jobSignalRequest:
    example: |-
        <jobSignalRequest>
          <id>231</id>
          <receiveTaskId>waitState</receiveTaskId>
          <parameters>
            <parameter>
              <name>key1</name>
              <value>value1</value>
            </parameter>
            <parameter>
              <name>key2</name>
              <value>value1</value>
            </parameter>
          </parameters>
        </jobSignalRequest>
    properties:
      id:
        $ref: "#/definitions/id"
      parameters:
        $ref: "#/definitions/parameters"
        description: List of key/value pairs that will be made available to the job
      receiveTaskId:
        $ref: "#/definitions/receiveTaskId"
    required:
    - id
    - receiveTaskId
  mainClass:
    description: The main class to be used
    type: string
  message:
    type: string
  namespace:
    allOf:
    - $ref: "#/definitions/namespaceKey"
    example: |-
        <namespace>
          <namespaceCode>APP_A</namespaceCode>
        </namespace>
  namespaceCode:
    description: The namespace code
    example: APP_A
    type: string
  namespaceCreateRequest:
    example: |-
        <namespaceCreateRequest>
          <namespaceCode>APP_A</namespaceCode>
        </namespaceCreateRequest>
    properties:
      namespaceCode:
        $ref: "#/definitions/namespaceCode"
    required:
    - namespaceCode
    type: object
  namespaceKey:
    example: |-
        <namespace>
          <namespaceCode>APP_A</namespaceCode>
        </namespace>
    properties:
      namespaceCode:
        $ref: "#/definitions/namespaceCode"
    required:
    - namespaceCode
  namespaceKeys:
    example: |-
        <namespaceKeys>
          <namespaceKey>
            <namespaceCode>APP_A</namespaceCode>
          </namespaceKey>
          <namespaceKey>
            <namespaceCode>APP_B</namespaceCode>
          </namespaceKey>
        </namespaceKeys>
    items:
      $ref: "#/definitions/namespaceKey"
    type: array
  namespaceString:
    description: The name of the namespace
    example: APP_A
    type: string
  notificationName:
    description: The name of notification. Combination of namespace, notificationName,
      and businessObjectDataEventType must be unique
    type: string
  nullValue:
    description: 'The string to use for the null value (e.g. "\N").  Please note that
      a null value is allowed to be a whitespace character. XML escaping should be
      used when specifying non-ASCII characters. Note: when passing in an empty String,
      the response XML will return a NULL value (i.e. the tag will be absent). This
      is due to how Oracle stores empty Strings. Generate DDL POST calls will show
      the correct empty String value wrapped in single-quotes'
    type: string
  ooziePropertiesFileLocation:
    description: The location of oozie properties file
    type: string
  oozieWorkflowJob:
    allOf:
    - $ref: "#/definitions/emrClusterDefinitionKey"
    - required:
      - id
      - emrClusterName
      properties:
        emrClusterName:
          $ref: "#/definitions/emrClusterName"
        id:
          $ref: "#/definitions/id"
    example: |-
        <oozieWorkflowJob>
          <id>0000007-150624181113443-oozie-oozi-W</id>
          <namespace>APP_A</namespace>
          <emrClusterDefinitionName>cluster_definition_name</emrClusterDefinitionName>
          <emrClusterName>cluster_name</emrClusterName>
        </oozieWorkflowJob>
  oozieWorkflowJobStatus:
    properties:
      id:
        $ref: "#/definitions/id"
      startTime:
        $ref: "#/definitions/startTime"
      status:
        $ref: "#/definitions/stepStatus"
        description: |-
          The status of Oozie workflow. Possible status are:
          * DM_PREP: When DM is preparing to run the workflow and has not yet started running the workflow.
          * DM_FAILED: When DM failed to run the workflow, possible cases are when the provided worklow location is not valid or workflow.xml does not exist there.
    required:
    - id
    - startTime
    - status
  outputFormat:
    description: The output format for the generated DDL (e.g. HIVE_13_DDL)
    example: HIVE_13_DDL
    type: string
  parameter:
    properties:
      name:
        description: Name of the parameter
        type: string
      value:
        description: Value of the parameter
        type: string
    required:
    - name
    - value
  parameters:
    items:
      $ref: "#/definitions/parameter"
    type: array
  partitionKey:
    description: The business object format partition key
    example: PROCESS_DATE
    type: string
  partitionKeyGroup:
    description: The partition key group that this schema's top level or sub-partition
      key belongs to.  This value will be used to identify the ordered set of expected
      partition values when requesting to check business object data availability
      or generating Hive DDL using partition value ranges.  A partition key group
      value is required for the business object format in order to use partition value
      ranges with the relative business object data REST endpoints (such as generating
      Hive DDL or checking data availability)
    example: PROCESS_DATE
    type: string
  partitionKeyGroupCreateRequest:
    example: |-
        <partitionKeyGroupCreateRequest>
          <partitionKeyGroupKey>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </partitionKeyGroupKey>
        </partitionKeyGroupCreateRequest>
    properties:
      partitionKeyGroupKey:
        $ref: "#/definitions/partitionKeyGroupName"
    required:
    - partitionKeyGroupKey
  partitionKeyGroupKeys:
    example: |-
        <partitionKeyGroupKeys>
          <partitionKeyGroupKey>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </partitionKeyGroupKey>
        </partitionKeyGroupKeys>
    items:
      $ref: "#/definitions/partitionKeyGroupName"
    type: array
  partitionKeyGroupName:
    description: The name of the partition key group
    example: PROCESS_DATE_CALENDAR
    type: string
  partitionKeyGroupResponse:
    allOf:
    - $ref: "#/definitions/partitionKeyGroupCreateRequest"
    example: |-
        <partitionKeyGroup>
          <partitionKeyGroupKey>
            <partitionKeyGroup>PROCESS_DATE_CALENDAR</partitionKeyGroup>
          </partitionKeyGroupKey>
        </partitionKeyGroup>
  partitionValue:
    description: The partition value that the business object data is associated with (e.g. a specific process date such as 2014-04-01)
    example: '2014-10-01'
    type: string
  partitionValueFilter:
    properties:
      partitionKey:
        $ref: "#/definitions/partitionKey"
      partitionValueRange:
        $ref: "#/definitions/partitionValueRange"
        description: partitionValueRange or partitionValues should be present
      partitionValues:
        description: partitionValueRange or partitionValues should be present
        items:
          type: string
        type: array
    required:
    - partitionKey
  partitionValueRange:
    properties:
      endPartitionValue:
        $ref: "#/definitions/endPartitionValue"
      startPartitionValue:
        $ref: "#/definitions/startPartitionValue"
    required:
    - endPartitionValue
    - startPartitionValue
    type: object
  reason:
    description: 'A reason for the business object data not being available (NOT_REGISTERED,
      etc...) '
    type: string
  receiveTaskId:
    description: The task Id of the receive task in the job workflow to signal. The
      job must be waiting on this task at the time of this call
    type: string
  required:
    description: A Y/N flag that shows whether this schema column is required or not
    type: boolean
  retriesLeft:
    format: int32
    type: integer
  rowCount:
    format: int64
    type: integer
  runOozieWorkflowRequest:
    allOf:
    - $ref: "#/definitions/emrClusterDefinitionKey"
    - required:
      - emrClusterName
      - workflowLocation
      type: object
      properties:
        emrClusterName:
          $ref: "#/definitions/emrClusterName"
        workflowLocation:
          $ref: "#/definitions/workflowLocation"
        parameters:
          description: The properties to be passed to oozie workflow. No duplicate
            values are allowed
          $ref: "#/definitions/parameters"
    example: |-
        <runOozieWorkflowRequest>
          <namespace>APP_A</namespace>
          <emrClusterDefinitionName>cluster_definition_name</emrClusterDefinitionName>
          <emrClusterName>cluster_name</emrClusterName>
          <workflowLocation>s3://1234-5678-3456-application-dev-staging/test_workflow_folder/</workflowLocation>
          <parameters>
            <parameter>
              <name>script1</name>
              <value>test_script.sh</value>
            </parameter>
          </parameters>
        </runOozieWorkflowRequest>
  s3KeyPrefix:
    description: The S3 key prefix to use when writing or accessing the data. Note
      that the S3 key prefix will not contain a trailing "directory" separator and
      it will be up to the caller to append one as needed
    type: string
  s3KeyPrefixInformation:
    example: |-
        <s3KeyPrefixInformation>
          <s3KeyPrefix>app-a/exchange-a/prc/txt/new-orders/frmt-v1/data-v0/process-date=2014-05-27/exec-status=A/symbol=B</s3KeyPrefix>
        </s3KeyPrefixInformation>
    properties:
      s3KeyPrefix:
        $ref: "#/definitions/s3KeyPrefix"
    required:
    - s3KeyPrefix
  Schema:
    properties:
      columns:
        $ref: "#/definitions/Columns"
        description: A wrapper of various schema columns that are actually present
          in the relative data file(s)
      delimiter:
        $ref: "#/definitions/delimiter"
      escapeCharacter:
        $ref: "#/definitions/escapeCharacter"
      nullValue:
        $ref: "#/definitions/nullValue"
      partitionKeyGroup:
        $ref: "#/definitions/partitionKeyGroup"
      partitions:
        $ref: "#/definitions/Columns"
        description: A wrapper of partition columns for a specific schema.  A schema
          might have zero, one or more partition columns.  If a partition column is
          present in the relative data file(s), it should be also listed as a regular
          schema column with all relative column information fields for the two columns
          matching (using case sensitive string comparison)
    required:
    - nullValue
  scriptLocation:
    description: The location of shell script
    type: string
  size:
    description: The schema column size
    type: string
  sshKeyPairName:
    description: ''
    type: string
  startPartitionValue:
    description: The start partition value for the partition value range
    type: string
  startTime:
    description: Job start timestamp
    type: string
  status:
    description: Data Status
    enum:
    - ARCHIVED
    - DELETED
    - EXPIRED
    - INVALID
    - RE-ENCRYPTING
    - UPLOADING
    - VALID
    example: VALID
    type: string
  statusCode:
    format: int32
    type: integer
  statusDescription:
    type: string
  Step:
    properties:
      continueOnError:
        $ref: "#/definitions/continueOnError"
      id:
        $ref: "#/definitions/id"
      jarLocation:
        $ref: "#/definitions/jarLocation"
      scriptArguments:
        items:
          type: string
        type: array
      status:
        $ref: "#/definitions/stepStatus"
      stepName:
        $ref: "#/definitions/stepName"
    required:
    - id
    - status
    - stepName
  stepName:
    description: The name of the step
    type: string
  stepStatus:
    description: Step Status
    enum:
    - FAILED
    - KILLED
    - PREP
    - RUNNING
    - SUCCEEDED
    - SUSPENDED
    type: string
  storage:
    example: |-
        <storage>
          <name>testStorage</name>
          <storagePlatformName>S3</storagePlatformName>
          <attributes>
            <attribute>
              <name>bucket.name</name>
              <value>1234-5678-3456-managed</value>
            </attribute>
          </attributes>
        </storage>
    properties:
      attributes:
        $ref: "#/definitions/Attributes"
      name:
        description: The name of the storage
        type: string
      storagePlatformName:
        $ref: "#/definitions/storagePlatformName"
    required:
    - name
    - storagePlatformName
  storageBusinessObjectDefinitionDailyUploadStat:
    allOf:
    - $ref: "#/definitions/storageDailyUploadStat"
    - required:
      - namespace
      - businessObjectDefinitionName
      - dataProviderName
      properties:
        businessObjectDefinitionName:
          $ref: "#/definitions/businessObjectDefinitionName"
        dataProviderName:
          $ref: "#/definitions/dataProviderName"
        namespace:
          $ref: "#/definitions/namespaceString"
  storageBusinessObjectDefinitionDailyUploadStats:
    example: |-
        <storageBusinessObjectDefinitionDailyUploadStats>
          <storageBusinessObjectDefinitionDailyUploadStat>
            <uploadDate>2014-06-27</uploadDate>
            <namespace>APP_A</namespace>
            <dataProviderName>ADF</dataProviderName>
            <businessObjectDefinitionName>ADF_ORDER_RESPONSE</businessObjectDefinitionName>
            <totalFiles>10</totalFiles>
            <totalBytes>4339910540</totalBytes>
          </storageBusinessObjectDefinitionDailyUploadStat>
          <storageBusinessObjectDefinitionDailyUploadStat>
            <uploadDate>2014-06-27</uploadDate>
            <namespace>APP_A</namespace>
            <dataProviderName>ADF</dataProviderName>
            <businessObjectDefinitionName>ADF_QUOTE</businessObjectDefinitionName>
            <totalFiles>180</totalFiles>
            <totalBytes>8197666760</totalBytes>
          </storageBusinessObjectDefinitionDailyUploadStat>
        </storageBusinessObjectDefinitionDailyUploadStats>
    items:
      $ref: "#/definitions/storageBusinessObjectDefinitionDailyUploadStat"
    type: array
  storageCreateRequest:
    allOf:
    - $ref: "#/definitions/storage"
    example: |-
        <storageCreateRequest>
          <name>S3_MANAGED</name>
          <storagePlatformName>S3</storagePlatformName>
          <attributes>
            <attribute>
              <name>bucket.name</name>
              <value>1234-5678-3456-managed</value>
            </attribute>
            <attribute>
              <name>s3.access.key</name>
              <value>AtUGvdfvDnvQQnUsVxxWzR7UZEQzUyf+ieiTGFJt0lM=</value>
            </attribute>
            <attribute>
              <name>s3.secret.key</name>
              <value>JML/DXvK8JCHvR8kQP12qpEZRMgAM65UdRLuCaAIVCh18ZL53OS7rlQJ9H5N/4Sf</value>
            </attribute>
          </attributes>
        </storageCreateRequest>
  storageDailyUploadStat:
    properties:
      totalBytes:
        $ref: "#/definitions/totalBytes"
      totalFiles:
        $ref: "#/definitions/totalFiles"
      uploadDate:
        $ref: "#/definitions/uploadDate"
    required:
    - totalBytes
    - totalFiles
    - uploadDate
  storageDailyUploadStats:
    example: |-
        <storageDailyUploadStats>
          <storageDailyUploadStat>
            <uploadDate>2014-07-02</uploadDate>
            <totalFiles>5305</totalFiles>
            <totalBytes>285481148</totalBytes>
          </storageDailyUploadStat>
          <storageDailyUploadStat>
            <uploadDate>2014-07-03</uploadDate>
            <totalFiles>5529</totalFiles>
            <totalBytes>261105217</totalBytes>
          </storageDailyUploadStat>
        </storageDailyUploadStats>
    items:
      $ref: "#/definitions/storageDailyUploadStat"
    type: array
  storageDirectory:
    properties:
      directoryPath:
        $ref: "#/definitions/directoryPath"
    required:
    - directoryPath
  StorageFile:
    properties:
      filePath:
        $ref: "#/definitions/filePath"
      fileSizeBytes:
        $ref: "#/definitions/fileSizeBytes"
      rowCount:
        $ref: "#/definitions/rowCount"
    required:
    - filePath
    - fileSizeBytes
  storageKey:
    properties:
      storageName:
        $ref: "#/definitions/storageName"
    required:
    - storageName
  storageKeys:
    example: |-
        <storageKeys>
          <storageKey>
            <storageName>S3_MANAGED</storageName>
          </storageKey>
          <storageKey>
            <storageName>S3_MANAGED_EXTERNAL</storageName>
          </storageKey>
        </storageKeys>
    items:
      $ref: "#/definitions/storageKey"
    type: array
  storageName:
    description: The storage name. The storage must be of the S3 storage platform
      type and the data should be stored according to the S3 Naming Conventions
    example: S3_MANAGED
    type: string
  storagePlatform:
    example: |-
        <storagePlatform>
          <name>S3</name>
        </storagePlatform>
    properties:
      name:
        example: S3
        type: string
    required:
    - name
  storagePlatformName:
    description: The name of the storage platform associated with this storage
    example: S3
    type: string
  storagePlatforms:
    example: |-
        <storagePlatforms>
          <storagePlatform>
            <name>S3</name>
          </storagePlatform>
        </storagePlatforms>
    items:
      $ref: "#/definitions/storagePlatform"
    type: array
  StorageUnit:
    properties:
      storageDirectory:
        $ref: "#/definitions/storageDirectory"
      storageFiles:
        items:
          $ref: "#/definitions/StorageFile"
        type: array
      storageName:
        $ref: "#/definitions/storageName"
    required:
    - storageFiles
    - storageName
  StorageUnitCreateRequest:
    properties:
      storageDirectory:
        $ref: "#/definitions/storageDirectory"
      storageFiles:
        items:
          $ref: "#/definitions/StorageFile"
        type: array
      storageName:
        $ref: "#/definitions/storageName"
      discoverStorageFiles:
        $ref: "#/definitions/discoverStorageFiles"
    required:
    - storageFiles
    - storageName
  storageUpdateRequest:
    allOf:
    - $ref: "#/definitions/storage"
    example: |-
        <storageUpdateRequest />
  subnetId:
    description: ''
    type: string
  SubPartitionValues:
    items:
      type: string
    type: array
  tableName:
    description: The table name to be used in the generated DDL
    type: string
  totalBytes:
    description: The total number of bytes uploaded to the storage on the date specified
    format: int64
    type: integer
  totalFiles:
    description: The total number of files uploaded to the storage on the date specified
    format: int64
    type: integer
  type:
    description: The data type of the schema column
    type: string
  uploadDate:
    description: The upload date in YYYY-MM-DD format
    type: string
  uploadSingleCredentialExtensionResponse:
    example: |-
        <uploadSingleCredentialExtensionResponse>
          <awsAccessKey>exampleAccessKey</awsAccessKey>
          <awsSecretKey>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</awsSecretKey>
          <awsSessionToken>AQoDYXdzEJr...</awsSessionToken>
          <awsSessionExpirationTime>2015-05-13T11:35:32.000-04:00</awsSessionExpirationTime>
        </uploadSingleCredentialExtensionResponse>
    properties:
      awsAccessKey:
        $ref: "#/definitions/awsAccessKey"
      awsSecretKey:
        $ref: "#/definitions/awsSecretKey"
      awsSessionExpirationTime:
        $ref: "#/definitions/awsSessionExpirationTime"
      awsSessionToken:
        $ref: "#/definitions/awsSessionToken"
    required:
    - awsAccessKey
    - awsSecretKey
    - awsSessionExpirationTime
    - awsSessionToken
    type: object
  uploadSingleInitiationRequest:
    example: |-
        <uploadSingleInitiationRequest>
          <sourceBusinessObjectFormatKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>FILE</businessObjectDefinitionName>
            <businessObjectFormatUsage>LOADING_DOCK</businessObjectFormatUsage>
            <businessObjectFormatFileType>ATCHM</businessObjectFormatFileType>
            <businessObjectFormatVersion>0</businessObjectFormatVersion>
          </sourceBusinessObjectFormatKey>
          <targetBusinessObjectFormatKey>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>FILE</businessObjectDefinitionName>
            <businessObjectFormatUsage>EXTERNAL</businessObjectFormatUsage>
            <businessObjectFormatFileType>ATCHM</businessObjectFormatFileType>
            <businessObjectFormatVersion>0</businessObjectFormatVersion>
          </targetBusinessObjectFormatKey>
          <businessObjectDataAttributes>
            <attribute>
              <name>test name</name>
              <value>test value</value>
            </attribute>
          </businessObjectDataAttributes>
          <file>
            <fileName>Report.doc</fileName>
            <fileSizeBytes>56789</fileSizeBytes>
          </file>
        </uploadSingleInitiationRequest>
    properties:
      businessObjectDataAttributes:
        $ref: "#/definitions/Attributes"
        description: |-
          This specifies a list of custom metadata to be stored with the business object data when registered.
          Some of these attributes may be required based on the format registration.  Please see the documentation for Business Object Format for more details.
      file:
        $ref: "#/definitions/File"
        description: A wrapper for a file information
      sourceBusinessObjectFormatKey:
        $ref: "#/definitions/businessObjectFormatKey"
        description: A wrapper for the source business object format key elements
      targetBusinessObjectFormatKey:
        $ref: "#/definitions/businessObjectFormatKey"
        description: A wrapper for the target business object format key elements
    required:
    - file
    - sourceBusinessObjectFormatKey
    - targetBusinessObjectFormatKey
    type: object
  uploadSingleInitiationResponse:
    example: |-
        <uploadSingleInitiationResponse>
          <sourceBusinessObjectData>
            <id>10569</id>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>FILE</businessObjectDefinitionName>
            <businessObjectFormatUsage>LOADING_DOCK</businessObjectFormatUsage>
            <businessObjectFormatFileType>ATCHM</businessObjectFormatFileType>
            <businessObjectFormatVersion>0</businessObjectFormatVersion>
            <partitionKey>UUID</partitionKey>
            <partitionValue>54947df8-0e9e-4471-a2f9-9af509fb5889</partitionValue>
            <version>0</version>
            <latestVersion>true</latestVersion>
            <status>UPLOADING</status>
            <storageUnits>
              <storageUnit>
                <storage>
                  <name>S3_LOADING_DOCK</name>
                  <storagePlatformName>S3</storagePlatformName>
                  <attributes>
                    <attribute>
                      <name>bucket.name</name>
                      <value>1234-5678-3456-loading-dock</value>
                    </attribute>
                    <attribute>
                      <name>s3.endpoint</name>
                      <value>s3-external-1.amazonaws.com</value>
                    </attribute>
                  </attributes>
                </storage>
                <storageDirectory>
                  <directoryPath>app-a/54947df8-0e9e-4471-a2f9-9af509fb5889</directoryPath>
                </storageDirectory>
                <storageFiles>
                  <storageFile>
                    <filePath>app-a/54947df8-0e9e-4471-a2f9-9af509fb5889/Report.doc</filePath>
                    <fileSizeBytes>56789</fileSizeBytes>
                  </storageFile>
                </storageFiles>
              </storageUnit>
            </storageUnits>
            <attributes>
              <attribute>
                <name>test name</name>
                <value>test value</value>
              </attribute>
            </attributes>
            <businessObjectDataParents />
            <businessObjectDataChildren />
          </sourceBusinessObjectData>
          <targetBusinessObjectData>
            <id>10569</id>
            <namespace>APP_A</namespace>
            <businessObjectDefinitionName>PROCESS_ORDERS</businessObjectDefinitionName>
            <businessObjectFormatUsage>UPLD</businessObjectFormatUsage>
            <businessObjectFormatFileType>ATCHM</businessObjectFormatFileType>
            <businessObjectFormatVersion>0</businessObjectFormatVersion>
            <partitionKey>UUID</partitionKey>
            <partitionValue>54947df8-0e9e-4471-a2f9-9af509fb5889</partitionValue>
            <version>0</version>
            <latestVersion>true</latestVersion>
            <status>UPLOADING</status>
            <storageUnits>
              <storageUnit>
                <storage>
                  <name>S3_MANAGED_EXTERNAL</name>
                  <storagePlatformName>S3</storagePlatformName>
                  <attributes>
                    <attribute>
                      <name>bucket.name</name>
                      <value>1234-5678-3456-external</value>
                    </attribute>
                    <attribute>
                      <name>s3.endpoint</name>
                      <value>s3-external-1.amazonaws.com</value>
                    </attribute>
                  </attributes>
                </storage>
                <storageDirectory>
                  <directoryPath>app-a/54947df8-0e9e-4471-a2f9-9af509fb5889</directoryPath>
                </storageDirectory>
                <storageFiles>
                  <storageFile>
                    <filePath>app-a/54947df8-0e9e-4471-a2f9-9af509fb5889/Report.doc</filePath>
                    <fileSizeBytes>56789</fileSizeBytes>
                  </storageFile>
                </storageFiles>
              </storageUnit>
            </storageUnits>
            <attributes>
              <attribute>
                <name>test name</name>
                <value>test value</value>
              </attribute>
            </attributes>
            <businessObjectDataParents />
            <businessObjectDataChildren />
          </targetBusinessObjectData>
          <file>
            <fileName>Report.doc</fileName>
            <fileSizeBytes>56789</fileSizeBytes>
          </file>
          <uuid>54947df8-0e9e-4471-a2f9-9af509fb5889</uuid>
          <awsAccessKey>exampleAccessKey</awsAccessKey>
          <awsSecretKey>wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY</awsSecretKey>
          <awsSessionToken>AQoDYXdzEJr...</awsSessionToken>
          <awsSessionExpirationTime>2015-05-13T11:35:32.000-04:00</awsSessionExpirationTime>
          <awsKmsKeyId>arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012</awsKmsKeyId>
        </uploadSingleInitiationResponse>
    properties:
      awsAccessKey:
        $ref: "#/definitions/awsAccessKey"
      awsKmsKeyId:
        $ref: "#/definitions/awsKmsKeyId"
      awsSecretKey:
        $ref: "#/definitions/awsSecretKey"
      awsSessionExpirationTime:
        $ref: "#/definitions/awsSessionExpirationTime"
      awsSessionToken:
        $ref: "#/definitions/awsSessionToken"
      file:
        $ref: "#/definitions/File"
        description: A wrapper for a file information
      sourceBusinessObjectData:
        $ref: "#/definitions/businessObjectData"
        description: A wrapper for the source business object data elements
      targetBusinessObjectData:
        $ref: "#/definitions/businessObjectData"
        description: A wrapper for the target business object data elements
      uuid:
        $ref: "#/definitions/uuid"
    required:
    - awsAccessKey
    - awsKmsKeyId
    - awsSecretKey
    - awsSessionExpirationTime
    - awsSessionToken
    - file
    - sourceBusinessObjectData
    - targetBusinessObjectData
    - uuid
    type: object
  uuid:
    description: A UUID value generated by the Data Management system for this single
      file upload
    type: string
  version:
    description: The version of the data. Each time data is registered, the new version
      will be the previous version + 1
    format: int32
    type: integer
  WorkflowError:
    properties:
      errorMessage:
        $ref: "#/definitions/errorMessage"
      errorStackTrace:
        $ref: "#/definitions/errorStackTrace"
      retriesLeft:
        $ref: "#/definitions/retriesLeft"
    type: object
  WorkflowErrors:
    items:
      $ref: "#/definitions/WorkflowError"
    type: array
  workflowLocation:
    description: The location of oozie workflow resources on S3. Must have a valid
      workflow.xml in this location
    type: string
  WorkflowStep:
    properties:
      endTime:
        $ref: "#/definitions/endTime"
      id:
        $ref: "#/definitions/id"
      name:
        type: string
      startTime:
        $ref: "#/definitions/startTime"
    required:
    - id
    - name
    type: object
  WorkflowSteps:
    items:
      $ref: "#/definitions/WorkflowStep"
    type: array
  workflowXmlLocation:
    description: The location of oozie workflow xml
    type: string
parameters:
  businessObjectDataAttributeName:
    description: businessObjectDataAttributeName
    in: path
    name: businessObjectDataAttributeName
    required: true
    type: string
  businessObjectDataVersion:
    description: Data Version
    format: int32
    in: path
    minimum: 0
    name: businessObjectDataVersion
    required: true
    type: integer
  businessObjectDataVersionQuery:
    description: Data Version
    format: int32
    in: query
    minimum: 0
    name: businessObjectDataVersion
    required: false
    type: integer
  businessObjectDefinitionName:
    description: Object Name
    in: path
    name: businessObjectDefinitionName
    required: true
    type: string
  businessObjectFormatFileType:
    description: Format File Type
    in: path
    name: businessObjectFormatFileType
    required: true
    type: string
  businessObjectFormatUsage:
    description: Format Usage
    in: path
    name: businessObjectFormatUsage
    required: true
    type: string
  businessObjectFormatVersion:
    description: Format Version
    format: int32
    in: path
    minimum: 0
    name: businessObjectFormatVersion
    required: true
    type: integer
  businessObjectFormatVersionQuery:
    description: Format Version
    format: int32
    in: query
    minimum: 0
    name: businessObjectFormatVersion
    required: false
    type: integer
  customDdlName:
    description: Custom DDL Name
    in: path
    name: customDdlName
    required: true
    type: string
  deleteFiles:
    default: false
    description: If true, the data delete operation will remove any files/directories
      registered with this business object data in all storages of "S3" storage platform
      type
    in: query
    name: deleteFiles
    required: true
    type: boolean
  emrClusterDefinitionName:
    description: EMR Cluster Definition Name
    in: path
    name: emrClusterDefinitionName
    required: true
    type: string
  emrClusterName:
    description: EMR Cluster Name
    in: path
    name: emrClusterName
    required: true
    type: string
  jobName:
    description: Job Name
    in: path
    name: jobName
    required: true
    type: string
  name:
    description: Name of the entity
    in: path
    name: name
    required: true
    type: string
  namespace:
    description: NameSpace
    in: path
    name: namespace
    required: true
    type: string
    x-enum: configuration.getNamespaces
  namespaceQuery:
    description: NameSpace
    in: query
    name: namespace
    required: false
    type: string
  notificationName:
    description: Notification Name
    in: path
    name: notificationName
    required: true
    type: string
  partitionKeyGroup:
    description: Partition Key Group
    in: path
    name: partitionKeyGroup
    required: true
    type: string
  partitionKeyGroupName:
    description: Partition Key Group Name
    in: path
    name: partitionKeyGroupName
    required: true
    type: string
  partitionValue:
    description: The primary partition value of the business object data
    in: path
    name: partitionValue
    required: true
    type: string
  partitionValueQuery:
    description: Partition Value
    in: query
    name: partitionValue
    required: true
    type: string
  storageName:
    description: Storage Name
    in: path
    name: storageName
    required: true
    type: string
  subPartition1Value:
    description: The 1st subpartition value of the business object data
    in: path
    name: subPartition1Value
    required: true
    type: string
  subPartition2Value:
    description: The 2nd subpartition value of the business object data
    in: path
    name: subPartition2Value
    required: true
    type: string
  subPartitionValues:
    description: Sub Partition Values (separated by |)
    in: query
    name: subPartitionValues
    required: false
    type: string
"paths":
  "/buildInfo":
    get:
      description: Gets the build information for the Data Management deployed code
      operationId: getBuildInfo
      parameters: []
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/buildInfo"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Gets the application build information.
      tags:
      - application
  "/businessObjectData":
    post:
      description: |-
        Registers a new instance of Business Object Data (BOD) in the Data Management system. A BOD represents a block of actual data as stored in a set of data files.  Each BOD instance is identified by a primary partition (required) and sub-partition (optional) values and a previously registered business object format. BOD is a logical segment of a business object definition in a specified business object format defined by a primary partition value along with optional sub-partition values.  Each BOD instance is associated with one or more storage units.  Each Storage Unit is an abstract metadata object associated with one of your previously registered BOD instances and storages.  BOD can also be associated with a list of custom metadata (attributes).

          Some of BOD attributes may be required based on the Business Object Format registration.

        Note:

        When registering business object data in S3_MANAGED storage, the following validations are performed by the DM Web Service for each file being registered:
        * Ensure the S3 file path adheres to the S3 Naming Convention
        * Ensure the file is not referenced by another business object data in this storage
        * Ensure the file actually exists on S3
      operationId: registerData
      parameters:
      - required: true
        in: body
        description: Data to add
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectData"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Register Business Object Data
      tags:
      - data
  "/businessObjectData/availability":
    post:
      description: |-
        Performs a search and returns a list of business object data status information for a range of requested business object data in the specified storage. The relative business object format **must** be associated with an existing partition key group in order to use partition value ranges with this service
        * The request must contain either a single partition value filter or up to 5 partition value filters when passed inside partitionValueFilters wrapper.
        * Only a single partition value range is allowed per request.
        * Partition key is required when passing multiple partition value filters inside partitionValueFilters wrapper.
        * When request contains multiple partition value filters, the system will check business object data availability for n-fold Cartesian product of the partition values specified, where n is a number of partition value filters (partition value sets).
      operationId: getAvailability
      parameters:
      - required: true
        in: body
        description: Search request
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataAvailabilityRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAvailability"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Search and return a list of business object data key values and relative
        statuses
      tags:
      - data
  "/businessObjectData/generateDdl":
    post:
      description: |-
        Retrieves the DDL to initialize the specified type of the database system (e.g. Hive) to perform queries for a range of requested business object data in the specified storage of the S3 storage platform type
        * This API requires the relative business object data to be registered according to Data Management S3 Naming Convention.
        * The relative business object format must be associated with an existing partition key group in order to use partition value ranges with this service.
        * The request must contain either a single partition value filter or up to 5 partition value filters when passed inside partitionValueFilters wrapper.
        * Only a single partition value range is allowed per request.
        * Partition key is required when passing mutiple partition value filters inside partitionValueFilters wrapper.
        * When request contains mutiple partition value filters, the system will check business object data availability for n-fold Cartesian product of the partition values specified, where n is a number of partition value filters (partition value sets).
      operationId: getDdl
      parameters:
      - required: true
        in: body
        description: DDL request
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataDdlRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataDdl"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieves the DDL for the registered data set
      tags:
      - ddl
  "/businessObjectData/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}":
    get:
      description: Retrieves an existing business object data based on the specified
        parameters
      operationId: getRegistration
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/partitionValueQuery"
      - $ref: "#/parameters/businessObjectDataVersionQuery"
      - $ref: "#/parameters/businessObjectFormatVersionQuery"
      - $ref: "#/parameters/subPartitionValues"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectData"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Registered Business Object Data
      tags:
      - data
  "/businessObjectData/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}":
    delete:
      description: Deletes an existing business object data based on the specified
        parameters. This functionality is available in lower environments **ONLY**
        and it is **NOT** available in production environment
      operationId: deleteRegistration
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/deleteFiles"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectData"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Business Object Data
      tags:
      - data
  "/businessObjectData/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/businessObjectDataVersions/{businessObjectDataVersion}":
    delete:
      description: Deletes an existing business object data based on the specified
        parameters. This functionality is available in lower environments **ONLY**
        and it is **NOT** available in production environment
      operationId: deleteRegistrationSub1
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/subPartition1Value"
      - $ref: "#/parameters/deleteFiles"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectData"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: 'Delete Business Object Data: One subpartition'
      tags:
      - data
  "/businessObjectData/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/subPartition2Values/{subPartition2Value}/businessObjectDataVersions/{businessObjectDataVersion}":
    delete:
      description: Deletes an existing business object data based on the specified
        parameters. This functionality is available in lower environments **ONLY**
        and it is **NOT** available in production environment
      operationId: deleteRegistrationSub2
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/subPartition1Value"
      - $ref: "#/parameters/subPartition2Value"
      - $ref: "#/parameters/deleteFiles"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectData"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: 'Delete Business Object Data: Two subpartitions'
      tags:
      - data
  "/businessObjectData/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/s3KeyPrefix":
    get:
      description: Gets an S3 key prefix where business object data can be written
        to or expected to be found. The S3 key prefix is generated according to the
        Data Management S3 Naming Convention
      operationId: getPrefix
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValueQuery"
      - $ref: "#/parameters/businessObjectDataVersionQuery"
      - $ref: "#/parameters/subPartitionValues"
      - description: If true, an S3 key prefix will be created for a new business
          object data version.  If false, then only an initial business object data
          version (v0) S3 key prefix can be returned.  This parameter is ignored,
          when the business object data version is specified
        default: false
        required: false
        in: query
        type: boolean
        name: createNewVersion
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/s3KeyPrefixInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Gets an S3 key prefix for business object data
      tags:
      - data
  "/businessObjectData/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/versions":
    get:
      description: Retrieves all versions of business object data based on the specified
        parameters
      operationId: getAllRegistrations
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/partitionValueQuery"
      - $ref: "#/parameters/businessObjectDataVersionQuery"
      - $ref: "#/parameters/businessObjectFormatVersionQuery"
      - $ref: "#/parameters/subPartitionValues"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataVersions"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get All Versions Of Registered Business Object Data
      tags:
      - data
  "/businessObjectDataAttributes":
    post:
      description: Registers a new business object data attribute which is identified
        by name and a previously registered business object data
      operationId: addAttribute
      parameters:
      - required: true
        in: body
        description: Attribute to add
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataAttributeCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttribute"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add an Attribute to a Registered Business Object Data
      tags:
      - attribute
  "/businessObjectDataAttributes/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}":
    get:
      description: Retrieves a list of business object data attributes registered
        for a specific business object data
      operationId: getAttributes
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttributeKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List Attributes
      tags:
      - attribute
  "/businessObjectDataAttributes/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}":
    delete:
      description: Deletes an existing business object data attribute based on the
        specified parameters
      operationId: deleteAttribute
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/businessObjectDataAttributeName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttribute"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Attribute
      tags:
      - attribute
    get:
      description: Gets information about an existing business object data attribute
        based on the specified parameters
      operationId: getAttribute
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/businessObjectDataAttributeName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttribute"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Attribute
      tags:
      - attribute
    put:
      description: Updates an existing business object data attribute based on the
        specified parameters
      operationId: updateAttribute
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/businessObjectDataAttributeName"
      - required: true
        in: body
        description: New Value
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataAttributeUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttribute"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Update Attribute Value
      tags:
      - attribute
  "/businessObjectDataAttributes/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/businessObjectDataVersions/{businessObjectDataVersion}":
    get:
      description: Retrieves a list of business object data attributes registered
        for a specific business object data
      operationId: getAttributesSub1
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/subPartition1Value"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttributeKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: 'List Attributes: One Subpartition'
      tags:
      - attribute
  "/businessObjectDataAttributes/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}":
    delete:
      description: Deletes an existing business object data attribute based on the
        specified parameters
      operationId: deleteAttributeSub1
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/businessObjectDataAttributeName"
      - $ref: "#/parameters/subPartition1Value"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttribute"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: 'Delete Attribute: One Subpartition'
      tags:
      - attribute
    get:
      description: Gets information about an existing business object data attribute
        based on the specified parameters
      operationId: getAttributeSub1
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/businessObjectDataAttributeName"
      - $ref: "#/parameters/subPartition1Value"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttribute"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: 'Get Attribute: One Subpartition'
      tags:
      - attribute
    put:
      description: Updates an existing business object data attribute based on the
        specified parameters
      operationId: updateAttributeSub1
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/businessObjectDataAttributeName"
      - $ref: "#/parameters/subPartition1Value"
      - required: true
        in: body
        description: New Value
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataAttributeUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataAttribute"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: 'Update Attribute Value: One Subpartition'
      tags:
      - attribute
  "/businessObjectDataStatus/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}":
    put:
      description: Updates an existing business object data status based on the specified
        parameters
      operationId: updateDataStatus
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - required: true
        in: body
        description: Status to set
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataStatusUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataStatusUpdateResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Set Business Object Data Status
      tags:
      - data
  "/businessObjectDataStatus/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/businessObjectDataVersions/{businessObjectDataVersion}":
    put:
      description: Updates an existing business object data status based on the specified
        parameters
      operationId: updateDataStatusSub1
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      - $ref: "#/parameters/subPartition1Value"
      - required: true
        in: body
        description: Status to set
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataStatusUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataStatusUpdateResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: 'Set Business Object Data Status: One Subpartition)'
      tags:
      - data
  "/businessObjectDataStorageFiles":
    post:
      description: Adds storage files to an existing storage unit
      operationId: addStorageFiles
      parameters:
      - required: true
        in: body
        description: Files to add
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataStorageFilesCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataStorageFilesCreateResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Adds storage files to an existing storage unit
      tags:
      - data
  "/businessObjectDefinitions":
    get:
      description: Retrieves the list of all existing business object definitions
        for a specific namespace if given
      operationId: getObjects
      parameters:
      - $ref: "#/parameters/namespaceQuery"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDefinitionKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List Business Object Definitions
      tags:
      - object
    post:
      description: |-
        Registers a new business object definition which is identified by namespace and name and contains a description and references to an existing namespace and data provider. Business object definition defines a logical structure of data.  Each business object definition has a unique name within the namespace. Business object definition is derived from namespace with the following relationships:
        * for each one namespace, there could be many business object definitions defined
        * for any given business object definition, there is only one namespace
      operationId: addObject
      parameters:
      - required: true
        in: body
        description: Object definition to add
        name: body
        schema:
          $ref: "#/definitions/businessObjectDefinitionCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDefinition"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Create Business Object Definition
      tags:
      - object
  "/businessObjectDefinitions/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}":
    delete:
      description: Deletes an existing business object definition based on the specified
        name
      operationId: deleteObject
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDefinition"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Business Object Definition
      tags:
      - object
    get:
      description: Retrieves an existing business object definition based on the specified
        name
      operationId: getObject
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDefinition"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Business Object Definition
      tags:
      - object
    put:
      description: Updates an existing business object definition based on the specified
        name
      operationId: updateObject
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - required: true
        in: body
        description: Object to update
        name: body
        schema:
          $ref: "#/definitions/businessObjectDefinitionUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDefinition"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Update Business Object Definition
      tags:
      - object
  "/businessObjectFormats":
    post:
      description: |-
        Registers a new Business Object Format (BOF) which is identified by usage, file type and a previously registered business object definition.

        Think of each BOF as providing the all the details needed to now how to read and process a particular set of data files (ie file format, file structure, etc). Each BOF registered in Data Management is a metadata object describing these specifics of the data layout for a previously registered Business Object Definition - down to details for each field in the relative schema.

        BOF is derived from Business Object Definition with the following relationships:
        * for one business object definition, there could be many business object formats defined
        * for any given business object format, there is only one business object definition
        * New BOF versions must be "additive" to the previous version. Meaning, a new BOF version schema can only add regular (non-partitioning) columns and all existing regular and partition columns must remain the same.
        * Business object format must be associated with an existing partition key group in order to use partition value ranges with Business Object Data Availability and Business Object Data Generate DDL services.
      operationId: addFormat
      parameters:
      - required: true
        in: body
        description: Format to add
        name: body
        schema:
          $ref: "#/definitions/businessObjectFormatCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectFormat"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add Business Object Format
      tags:
      - format
  "/businessObjectFormats/generateDdl":
    post:
      description: |-
        Retrieves the DDL to initialize the specified type of the database system (e.g. Hive) by creating a table for the requested business object format.  DDL service is designed to provide platform specific DDL, currently limited to Hive 13.
        Future enhancements will provide DDL for other DBMS, which may have different methods for working and the DDL would be different
         When custom DDL name is specified, the generated DDL uses the custom DDL which had previously been stored against the relative business object format.
      operationId: getFormatDdl
      parameters:
      - required: true
        in: body
        description: Format DDL request
        name: body
        schema:
          $ref: "#/definitions/businessObjectFormatDdlRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectFormatDdl"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a DDL based on the format
      tags:
      - ddl
  "/businessObjectFormats/generateDdlCollection":
    post:
      description: |-
        Retrieves the DDL to initialize the specified type of the database system (e.g. Hive) by creating tables for a collection of business object formats.
      operationId: getFormatDdl
      parameters:
      - required: true
        in: body
        description: Format DDL Collection request
        name: body
        schema:
          $ref: "#/definitions/businessObjectFormatDdlCollectionRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectFormatDdlCollectionResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Retrieve a DDL for a collection of business object formats
      tags:
      - ddl
  "/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}":
    get:
      description: Retrieves an existing business object formats based on the specified
        business object definition
      operationId: getFormats
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectFormatKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List Business Object Formats for an Object
      tags:
      - format
  "/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}":
    get:
      description: Retrieves an existing business object format based on the specified
        usage, file type, businessObjectFormatVersion and a previously registered
        business object definition
      operationId: getFormat
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersionQuery"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectFormat"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Business Object Format
      tags:
      - format
  "/businessObjectFormats/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}":
    delete:
      description: Deletes an existing business object format based on the specified
        usage, file type, version and a business object definition name.
      operationId: deleteFormat
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectFormat"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Business Object Format
      tags:
      - format
    put:
      description: Updates an existing business object format based on the specified
        usage, file type, version and a business object definition name.  The updateable
        data is the format description and the schema.  All other fields are not updatable.
      operationId: updateFormat
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - schema:
          $ref: "#/definitions/businessObjectFormatUpdateRequest"
        required: true
        description: Format to update
        name: body
        in: body
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectFormat"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Update Business Object Format
      tags:
      - format
  "/customDdls":
    post:
      description: Registers a new custom DDL which is identified by name and a previously
        registered business object format. Each custom DDL has a unique name within
        the business object format. Custom DDL, registered for a specific business
        object format, will be used as a replacement for the create table statement
        in the relative DDL returned by Business Object Format Generate DDL and Business
        Object Data Generate DDL services, when requested so in the relative generate
        DDL request.
      operationId: addCustomDdl
      parameters:
      - required: true
        in: body
        description: Custom DDL to add
        name: body
        schema:
          $ref: "#/definitions/customDdlCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/customDdl"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add Custom DDL which is identified by name and a previously registered
        business object format
      tags:
      - ddl
  "/customDdls/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}":
    get:
      description: Retrieves a list of custom DDLs registered for a specific business
        object format
      operationId: getCustomDdls
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/customDdlKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List Custom DDLs registered for business object format
      tags:
      - ddl
  "/customDdls/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/customDdlNames/{customDdlName}":
    delete:
      description: Deletes an existing custom DDL based on the specified parameters
      operationId: deleteCustomDdl
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/customDdlName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/customDdl"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Custom DDL
      tags:
      - ddl
    get:
      description: Gets information about an existing custom DDL based on the specified
        parameters
      operationId: getCustomDdl
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/customDdlName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/customDdl"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Custom DDL registered with business object format
      tags:
      - ddl
    put:
      description: Updates an existing custom DDL based on the specified parameters
      operationId: updateCustomDdl
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/customDdlName"
      - required: true
        in: body
        description: Custom DDL to update
        name: body
        schema:
          $ref: "#/definitions/customDdlUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/customDdl"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Update Custom DDL
      tags:
      - ddl
  "/download/single/initiation/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}":
    get:
      description: Gets the S3 "external" bucket location and temporary credentials
        to download a previously uploaded file. The Business Object Data key information
        specified in this endpoint should be the "target" one returned in the Completion
        Single File Upload endpoint. Note that this endpoint does not actually download
        the file, but rather gives temporary credentials so the caller can download
        the file themselves. Please see the documentation for Large File Upload for
        more details.
      operationId: downloadSingleFile
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/downloadSingleInitiationResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Download Single File
      tags:
      - file upload/download
  "/emrClusterDefinitions":
    post:
      description: Registers a new EMR Cluster Definition, which is identified by
        a namespace and an EMR cluster definition name. An EMR cluster definition
        is a pre-defined EMR cluster configuration, that is used to create/launch
        the actual EMR cluster instances.
      operationId: addClusterDefinition
      parameters:
      - required: true
        in: body
        description: Cluster definition to add
        name: body
        schema:
          $ref: "#/definitions/emrClusterDefinitionCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrClusterDefinitionInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add EMR Cluster Definition
      tags:
      - cluster definition
  "/emrClusterDefinitions/namespaces/{namespace}/emrClusterDefinitionNames/{emrClusterDefinitionName}":
    delete:
      description: Deletes an existing EMR Cluster Definition based on the specified
        namespace and an EMR cluster definition name.
      operationId: deleteClusterDefinition
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/emrClusterDefinitionName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrClusterDefinitionInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete EMR Cluster Definition
      tags:
      - cluster definition
    get:
      description: Retrieves an existing EMR Cluster Definition based on the specified
        namespace and an EMR cluster definition name.
      operationId: getClusterDefinition
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/emrClusterDefinitionName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrClusterDefinitionInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get an EMR Cluster Definition
      tags:
      - cluster definition
    put:
      description: Updates an existing EMR Cluster Definition based on the specified
        namespace and an EMR cluster definition name.
      operationId: updateClusterDefinition
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/emrClusterDefinitionName"
      - required: true
        in: body
        description: Cluster definition to update
        name: body
        schema:
          $ref: "#/definitions/emrClusterDefinitionUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrClusterDefinitionInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Update an EMR Cluster Definition
      tags:
      - cluster definition
  "/emrClusters":
    post:
      description: |-
        This call will create the EMR cluster needed for data processing identified by <applicationName> and <emrClusterName> based on <emrClusterDefinitionName>.

        If the cluster has already been created, a new ERM cluster will not be created.

        Status tag will be missing if the dryRun flag was set to true.

        Optionally, launch parameters will be overridden based on given parameters.
        * To help test the overridden parameters, a dry run mode will be provided, where if set, no cluster will be created, but the request and the definition will still be validated. The overridden definition will be returned as part of the response so the user may verify the overridden definition.  Please note that the dry run validation does not make any calls to AWS. The dry run may be successful, but it may still fail during the call to AWS.

        ###Best Price Search

        Based on the specified definition, DM may search for the best price for your clusters. The response XML will contain the definition which were used to actually create the cluster - that is, the search parameters will be converted to actual bid price.

        See EMR Cluster Definition to learn how to specify these search parameters.
      operationId: addEMRCluster
      parameters:
      - required: true
        in: body
        description: Cluster to add
        name: body
        schema:
          $ref: "#/definitions/emrClusterCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrCluster"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Create an EMR cluster
      tags:
      - cluster
  "/emrClusters/namespaces/{namespace}/emrClusterDefinitionNames/{emrClusterDefinitionName}/emrClusterNames/{emrClusterName}":
    delete:
      description: This call will terminate an existing EMR cluster
      operationId: deleteEMRCluster
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/emrClusterDefinitionName"
      - $ref: "#/parameters/emrClusterName"
      - description: If true, cluster termination protection is overridden
        default: false
        required: false
        in: query
        type: boolean
        name: overrideTerminationProtection
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrCluster"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Terminate running EMR cluster
      tags:
      - cluster
    get:
      description: This call will return the details of an existing EMR cluster.
      operationId: getEMRCluster
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/emrClusterDefinitionName"
      - $ref: "#/parameters/emrClusterName"
      - required: false
        type: string
        description: An EMR step Id, for which status/details are being requested
        in: query
        name: emrStepId
      - required: false
        type: string
        description: The EMR cluster Id, if provided, status of specific cluster if
          returned. If not provided, status of an Active cluster with the name is
          returned
        in: query
        name: emrClusterId
      - description: If true retrieves first 100 jobs in RUNNING status. If false
          no oozie jobs are retrieved
        default: false
        required: false
        in: query
        type: boolean
        name: retrieveOozieJobs
      - description: If true, detailed information such as step details will be returned.
          If false or not specified, Only Id, StepName and Status will be returned
          in activeStep and Step
        default: false
        required: false
        in: query
        type: boolean
        name: verbose
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrClusterStatus"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Check existing EMR cluster
      tags:
      - cluster
  "/emrHadoopJarSteps":
    post:
      description: This call will add a Hadoop jar step on an existing EMR cluster
        identified by <namespace> and <emrClusterName> based on <emrClusterDefinitionName>
      operationId: addHadoopJarStep
      parameters:
      - required: true
        in: body
        description: EMR Hadoop Step to add
        name: body
        schema:
          $ref: "#/definitions/emrHadoopJarStepAddRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrHadoopStep"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add a Hadoop jar step on an existing EMR cluster
      tags:
      - EMR step
  "/emrHiveSteps":
    post:
      description: This call will add a Hive step on an existing EMR cluster identified
        by <namespace> and <emrClusterName> based on <emrClusterDefinitionName>
      operationId: addHiveStep
      parameters:
      - required: true
        in: body
        description: EMR HIVE Step to add
        name: body
        schema:
          $ref: "#/definitions/emrHiveStepAddRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrHiveStep"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add a Hive step on an existing EMR cluster
      tags:
      - EMR step
  "/emrMasterSecurityGroups":
    post:
      description: This call will add the Security group on an existing EMR cluster
        identified by `<namespace>` and `<emrClusterName>` based on <emrClusterDefinitionName>
      operationId: addMasterSecurityGroup
      parameters:
      - required: true
        in: body
        description: EMR security to add
        name: body
        schema:
          $ref: "#/definitions/emrMasterSecurityGroupAddRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrMasterSecurityGroup"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add the Security group on an existing EMR cluster
      tags:
      - cluster
  "/emrOozieSteps":
    post:
      description: This call will add a Oozie step on an existing EMR cluster identified
        by<namespace> and <emrClusterName> based on <emrClusterDefinitionName>.
      operationId: addOozieStep
      parameters:
      - required: true
        in: body
        description: EMR Oozie Step to add
        name: body
        schema:
          $ref: "#/definitions/emrOozieStepAddRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrOozieStep"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add a Oozie step on an existing EMR cluster
      tags:
      - EMR step
  "/emrOozieWorkflows":
    post:
      description: |-
        This call will run an Oozie workflow on an existing EMR cluster identified by <namespace> and <emrClusterName> based on <emrClusterDefinitionName>.

        These workflows are submitted directly to oozie server running on EMR, and does not make use of EMR steps and hance run in parallel. The EMR cluster MUST have been started using DM services EMR Cluster Post or Create EMR Cluster. Oozie must be installed on the cluster. Instructions on how to install oozie are at the bottom of this page.

        Following properties are made available to the workflow, and can not overridden by providing a value in request.
        1. queueName=default (default queue for mapred.job.queue.name)
        1. masterIp (the private IP address of the master node)
        1. nameNode (the name node address)
        1. jobTracker (the job tracker address)
      operationId: runOozieWorkflow
      parameters:
      - required: true
        in: body
        description: Workflow to run
        name: body
        schema:
          $ref: "#/definitions/runOozieWorkflowRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/oozieWorkflowJob"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Run an Oozie workflow directly on the EMR cluster
      tags:
      - cluster
  "/emrPigSteps":
    post:
      description: This call will add a Pig step on an existing EMR cluster identified
        by<namespace> and <emrClusterName> based on <emrClusterDefinitionName>
      operationId: addPigStep
      parameters:
      - required: true
        in: body
        description: EMR Pig Step pig to add
        name: body
        schema:
          $ref: "#/definitions/emrPigStepAddRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrPigStep"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add a Pig step on an existing EMR cluster
      tags:
      - EMR step
  "/emrShellSteps":
    post:
      description: This call will add a Shell step on an existing EMR cluster identified
        by namespace and EMR cluster name based on EMR cluster definition name
      operationId: addShellStep
      parameters:
      - required: true
        in: body
        description: EMR Shell Step to add
        name: body
        schema:
          $ref: "#/definitions/emrShellStepAddRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/emrShellStep"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add a Shell step on an existing EMR cluster
      tags:
      - EMR step
  "/expectedPartitionValues":
    delete:
      description: |-
        Deletes specified expected partition values from an existing partition key group which is identified by name.
        * The delete request fails when any of the expected partition values submitted for deletion do not exist for the specified partition key group
      operationId: deletePartitionValues
      parameters:
      - required: true
        in: body
        description: Values to delete
        name: body
        schema:
          $ref: "#/definitions/expectedPartitionValuesDeleteRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/expectedPartitionValuesInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete value(s) of a partition key group
      tags:
      - keys and values
    post:
      description: |-
        Registers a list of expected partition values for a specific partition key group which is identified by name.

        Partition key group defines an ordered set of expected partition values that will be used when calling Business Object Data Availability and Business Object Data Generate DDL services using partition value ranges.
        * Business object format must be associated with an existing partition key group in order to use partition value ranges with Business Object Data Availability and Business Object Data Generate DDL services.
      operationId: addPartitionValues
      parameters:
      - required: true
        in: body
        description: Values to add
        name: body
        schema:
          $ref: "#/definitions/expectedPartitionValuesCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/expectedPartitionValuesInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add value(s) of a partition key group
      tags:
      - keys and values
  "/expectedPartitionValues/partitionKeyGroups/{partitionKeyGroup}":
    get:
      description: |-
        Retrieves a range of existing expected partition values

        * Out of startExpectedPartitionValue and endExpectedPartitionValue at least one request parameter is required
      operationId: getPartitionValues
      parameters:
      - $ref: "#/parameters/partitionKeyGroup"
      - required: false
        type: string
        description: The end expected partition value for the expected partition value
          range
        in: query
        name: endExpectedPartitionValue
      - required: false
        type: string
        description: The start expected partition value for the expected partition
          value range
        in: query
        name: startExpectedPartitionValue
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/expectedPartitionValuesInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get a range of a expected partition values
      tags:
      - keys and values
  "/expectedPartitionValues/partitionKeyGroups/{partitionKeyGroup}/expectedPartitionValues/{expectedPartitionValue}":
    get:
      description: Retrieves an existing expected partition value plus/minus an optional
        offset
      operationId: getPartitionValuesWithOffset
      parameters:
      - $ref: "#/parameters/partitionKeyGroup"
      - required: true
        type: string
        description: The expected partition value to retrieve plus/minus an optional
          offset
        in: path
        name: expectedPartitionValue
      - description: The positive or negative offset (e.g. -5 or 5)
        format: int32
        required: false
        in: query
        type: integer
        name: offset
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/expectedPartitionValueInformation"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get value of a partition key group +/- offset
      tags:
      - keys and values
  "/fileTypes":
    get:
      description: Retrieves a list of file type keys for all existing file types
      operationId: getFileTypes
      parameters: []
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/fileTypeKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List File Types
      tags:
      - configuration
  "/jobDefinitions":
    post:
      description: Registers a new job definition
      operationId: addJobDefinition
      parameters:
      - required: true
        in: body
        description: Job definition to add
        name: body
        schema:
          $ref: "#/definitions/jobDefinitionCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/jobDefinition"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Registers a new job definition
      tags:
      - job
  "/jobDefinitions/namespaces/{namespace}/jobNames/{jobName}":
    get:
      description: Gets a previously created job definition
      operationId: getJobDefinitions
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/jobName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/jobDefinition"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get job definition
      tags:
      - job
    put:
      description: Updates an existing job definition
      operationId: updateJobDefinition
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/jobName"
      - required: true
        in: body
        description: Job definition to update
        name: body
        schema:
          $ref: "#/definitions/jobDefinitionUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/jobDefinition"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Update job definition
      tags:
      - job
  "/jobs":
    post:
      description: This call will initiate the running of a data processing job defined
        previously and identified by <namespace> and <jobName>.  The job will currently
        be executed using the Activiti workflow engine. The job is executed asynchronously
        and this endpoint will return before the job is started.
      operationId: runJob
      parameters:
      - required: true
        in: body
        description: Run to add
        name: body
        schema:
          $ref: "#/definitions/jobCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/job"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Execute a job
      tags:
      - job
  "/jobs/ids/{id}":
    get:
      description: |-
        This call will return the status information of an already submitted job.

        Job information is stored and returned when either the job completes or an asynchronous task is encountered in the workflow
      operationId: getJobStatus
      parameters:
      - required: true
        type: string
        description: Internal job ID
        in: path
        name: id
      - description: If true, detailed information such as workflow xml, completed
          task details will be returned. If false or not specified, Only status, workflow
          variables, current step will be returned
        default: false
        required: false
        in: query
        type: boolean
        name: verbose
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/job"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Job Status
      tags:
      - job
  "/jobs/signal":
    post:
      description: |-
        This call will signal the job that is waiting on a Receive task. The workflow should be waiting on specified receive task at the time of this call. The receive task can be defined in workflow as follows:

        <receiveTask id="waitState" name="wait"/>
      operationId: signalJob
      parameters:
      - required: true
        in: body
        description: Signal to add
        name: body
        schema:
          $ref: "#/definitions/jobSignalRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/job"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add signal to a job
      tags:
      - job
  "/namespaces":
    get:
      description: Retrieves a list of namespace keys for all existing namespaces
      operationId: getNamespaces
      parameters: []
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/namespaceKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List Namespaces
      tags:
      - configuration
    post:
      description: Registers a new namespace which is identified by a namespace code
      operationId: addNamespace
      parameters:
      - required: true
        in: body
        description: Namespace to add
        name: body
        schema:
          $ref: "#/definitions/namespaceCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/namespace"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add Namespace
      tags:
      - configuration
  "/namespaces/{name}":
    delete:
      description: |-
        Deletes an existing namespace based on the specified namespace code.
         * When namespace is in use (i.e. there are business object definitions associated with it), the delete namespace call will result in a database constraint violation (the HTTP status code 400 "Bad Request")
      operationId: deleteNamespace
      parameters:
      - $ref: "#/parameters/name"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/namespace"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Namespace
      tags:
      - configuration
    get:
      description: Retrieves an existing namespace based on the specified namespace
        code
      operationId: getNamespace
      parameters:
      - $ref: "#/parameters/name"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/namespace"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Namespace
      tags:
      - configuration
  "/notificationRegistrations/businessObjectDataNotificationRegistrations":
    post:
      description: |-
        Creates a new business object data notification registration.

        * Combination of namespace, notificationName, and businessObjectDataEventType must be unique
        * The file type must be known by the system
        * The usage does not need to exist in the system
      operationId: addNotification
      parameters:
      - required: true
        in: body
        description: Notification to add
        name: body
        schema:
          $ref: "#/definitions/businessObjectDataNotificationRegistrationCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataNotificationRegistration"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add Notification
      tags:
      - notification
  "/notificationRegistrations/businessObjectDataNotificationRegistrations/namespaces/{namespace}":
    get:
      description: Gets a list of the keys for all business object data notification
        registrations existing in the system for a specified namespace
      operationId: getNotifications
      parameters:
      - $ref: "#/parameters/namespace"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataNotificationRegistrationKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List Notifications
      tags:
      - notification
  "/notificationRegistrations/businessObjectDataNotificationRegistrations/namespaces/{namespace}/notificationNames/{notificationName}":
    delete:
      description: Deletes an existing business object data notification registration
        based on the specified parameters.
      operationId: deleteNotification
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/notificationName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataNotificationRegistration"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Notification
      tags:
      - notification
    get:
      description: Gets a previously created business object data notification registration
      operationId: getNotification
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/notificationName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/businessObjectDataNotificationRegistration"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Notification
      tags:
      - notification
  "/partitionKeyGroups":
    get:
      description: Gets a list of the keys for all partition key groups defined in
        the system
      operationId: getPartitionKeyGroups
      parameters: []
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/partitionKeyGroupKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List partition key groups
      tags:
      - keys and values
    post:
      description: |-
        Registers a new partition key group which is identified by name.

        Partition key group defines an ordered set of valid (expected) partition values that will be used when calling Business Object Data Availability and Business Object Data Generate DDL services using partition value ranges.

        Business object format must be associated with an existing partition key group in order to use partition value ranges with Business Object Data Availability and Business Object Data Generate DDL services.
      operationId: addPartitionKeyGroup
      parameters:
      - required: true
        in: body
        description: Key to add
        name: body
        schema:
          $ref: "#/definitions/partitionKeyGroupCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/partitionKeyGroupResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Add partition key group
      tags:
      - keys and values
  "/partitionKeyGroups/{partitionKeyGroupName}":
    delete:
      description: Deletes an existing partition key group if unused
      operationId: deletePartitionKeyGroup
      parameters:
      - $ref: "#/parameters/partitionKeyGroupName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/partitionKeyGroupResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete partition key group
      tags:
      - keys and values
    get:
      description: Gets information about an existing partition key group by name
      operationId: getPartitionKeyGroup
      parameters:
      - $ref: "#/parameters/partitionKeyGroupName"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/partitionKeyGroupResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get partition key group
      tags:
      - keys and values
  "/storagePlatforms":
    get:
      description: Gets a list of the storage platforms defined in the system
      operationId: getStoragePlatforms
      parameters: []
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storagePlatforms"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List storage platforms
      tags:
      - configuration
  "/storagePlatforms/{name}":
    get:
      description: |-
        Get a storage platform by its name.

        Storage platform defines a way of storing logical data on a physical media.  For example, "S3" storage platform implies that data can be accessed using any of the Amazon S3 specific access methods (e.g. Amazon S3 web interface, AWS SDK, AWS CLI, etc...).  Each storage platform has a unique name.
      operationId: getStoragePlatform
      parameters:
      - $ref: "#/parameters/name"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storagePlatform"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Gets information about a storage platform
      tags:
      - configuration
  "/storages/":
    get:
      description: Retrieves a list of storage keys for all existing storages
      operationId: getStorages
      parameters: []
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storageKeys"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: List Storage instances
      tags:
      - configuration
    post:
      description: |-
        Creates a new storage instance associated with a storage platform
        (i.e. a specific S3 bucket). A storage registered in Data Management is a
        metadata object that describes a specific physical location that can be used
        to store data (i.e. data files). Each storage has a unique name. Storage is
        derived from storage platform with the following relationships:
        * for one storage platform, there could be many storages defined
        * for any given storage, there is only one storage platform

        Storage corresponds to an S3 bucket, an HDFS cluster, a database, or a NFS server.
        * "S3_MANAGED" is the name of the special S3 storage platform instance that contains business object
        data controlled by Data Management.

        Any changes to business object data in the managed storage should be done via Data Management system.
        Storage can define a list of custom metadata (set of attributes) that can be used
        to include credentials required to connect to the storage.  For example, for
        an S3 bucket, the relative storage can define "bucket.name".
      operationId: addStorage
      parameters:
      - required: true
        in: body
        description: Storage to create
        name: body
        schema:
          $ref: "#/definitions/storageCreateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storage"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Creates a new Storage instance
      tags:
      - configuration
  "/storages/{name}":
    delete:
      description: |-
        Deletes an existing storage. The response contains the information about the storage that was deleted.

        When storage is in use (there are storage units associated with it), the delete storage call will result in a database constraint violation (the HTTP status code 400 "Bad Request").
      operationId: deleteStorage
      parameters:
      - $ref: "#/parameters/name"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storage"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Delete Storage instance
      tags:
      - configuration
    get:
      description: Gets information about an existing storage
      operationId: getStorage
      parameters:
      - $ref: "#/parameters/name"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storage"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Get Storage instance
      tags:
      - configuration
    put:
      description: Updates an existing storage instance. There is currently no information
        that can be updated, but information will be added in a future Sprint.
      operationId: updateStorage
      parameters:
      - $ref: "#/parameters/name"
      - required: true
        in: body
        description: Storage to update
        name: body
        schema:
          $ref: "#/definitions/storageUpdateRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storage"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Update Storage instance
      tags:
      - configuration
  "/storages/{storageName}/storageDailyUploadStats":
    get:
      description: Gets daily cumulative statistics on files/bytes uploaded to an
        existing storage
      operationId: getStatDaily
      parameters:
      - $ref: "#/parameters/storageName"
      - required: false
        type: string
        name: uploadDate
        in: query
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storageDailyUploadStats"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Gets daily cumulative statistics
      tags:
      - stats
  "/storages/{storageName}/storageDailyUploadStatsByBusinessObjectDefinition":
    get:
      description: Gets daily cumulative statistics on files/bytes uploaded to an
        existing storage by business object definition
      operationId: getStatsByObject
      parameters:
      - $ref: "#/parameters/storageName"
      - required: false
        type: string
        name: uploadDate
        in: query
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/storageBusinessObjectDefinitionDailyUploadStats"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Gets daily cumulative statistics by object
      tags:
      - stats
  "/upload/single/credential/extension/namespaces/{namespace}/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}":
    get:
      description: Extends the upload single file credentials if the initial credentials
        will expire before the upload completes. This endpoint can be called as many
        times as needed to ensure the credentials remain valid until the file is successfully
        uploaded. The Business Object Data key information specified in this endpoint
        should be the "source" one that is associated with the loading dock bucket.
        Please see the documentation for Large File Upload for more details.
      operationId: extendCredentials
      parameters:
      - $ref: "#/parameters/namespace"
      - $ref: "#/parameters/businessObjectDefinitionName"
      - $ref: "#/parameters/businessObjectFormatUsage"
      - $ref: "#/parameters/businessObjectFormatFileType"
      - $ref: "#/parameters/businessObjectFormatVersion"
      - $ref: "#/parameters/partitionValue"
      - $ref: "#/parameters/businessObjectDataVersion"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/uploadSingleCredentialExtensionResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Upload Single Credential Extension
      tags:
      - file upload/download
  "/upload/single/initiation":
    post:
      description: |-
        Initiates a file upload that will allow a single file to be uploaded to the "loading dock" bucket. From a registration standpoint, this endpoint will result in the creation of a new source Business Object Data entry to track the file being uploaded into the loading dock, and also create a separate Business Object Data entry for the second "external" file to track it from an auditing perspective. The result of invoking this endpoint contains credentials that allow the caller to manually upload the file into a specific S3 path in the loading dock. Clients should then upload their file into S3. Once the file is uploaded successfully, loading dock S3 bucket posts a message to SQS queue, that initiates the re-encryption process. Please see the documentation for Large File Upload for more details.

        A request to initiate a single file upload results in creation of a business object data instance for the specified business object format with the partition value set to a UUID value generated by the Data Management system.  That partition value (UUID) would need to be used as part of the business object data key when accessing the following upload/download specific endpoints. For example:

        /download/single/initiation/namespaces/APP_A/businessObjectDefinitionNames/PROCESS_ORDERS/businessObjectFormatUsages/UPLD/businessObjectFormatFileTypes/ATCHM/businessObjectFormatVersions/0/partitionValues/54947df8-0e9e-4471-a2f9-9af509fb5889/businessObjectDataVersions/0
      operationId: startUpload
      parameters:
      - required: true
        in: body
        description: File to upload
        name: body
        schema:
          $ref: "#/definitions/uploadSingleInitiationRequest"
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: "#/definitions/uploadSingleInitiationResponse"
        default:
          description: General error
          schema:
            $ref: "#/definitions/Error"
      summary: Initiate single file upload
      tags:
      - file upload/download
produces:
- application/json
- application/xml
schemes:
# Removing schemes for now since adding both has a bug where http is used when https is the current URL.
# This causes the current URL scheme to be used.
# - http
# - https
security:
- basicAuth: []
securityDefinitions:
  basicAuth:
    type: basic
swagger: '2.0'
tags:
- description: Build Information
  name: application
- description: 'Business Object Data: Registration And Search'
  name: data
- description: Business Object Definition
  name: object
- description: Business Object Format
  name: format
- description: DDL Generation And Storage
  name: ddl
- description: Data Attributes
  name: attribute
- description: EMR Cluster Definitions
  name: cluster definition
- description: EMR Clusters
  name: cluster
- description: Files Uploading And Downloading
  name: file upload/download
- description: Job Definitions And Execution
  name: job
- description: Namespace, File Type, And Storage
  name: configuration
- description: Notifications Registration
  name: notification
- description: Partition Key Groups And Values
  name: keys and values
- description: Statistics
  name: stats
- description: Steps On EMR Cluster
  name: EMR step
- description: Storage Management
  name: storage
- description: Storage Platform(s)
  name: platform
