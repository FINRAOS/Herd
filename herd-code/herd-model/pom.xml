<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2015 herd contributors

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <parent>
      <groupId>org.finra.herd</groupId>
      <artifactId>herd-code</artifactId>
      <version>0.32.0-SNAPSHOT</version>
   </parent>

   <name>herd model</name>

   <!-- groupId and version are inherited from the parent and can be overridden here if needed. -->
   <artifactId>herd-model</artifactId>

   <description>This project contains the domain and model code. This consists of JPA entity classes and other data transfer objects (DTO's).</description>
   <url>http://finraos.github.io/herd/</url>

   <dependencies>

      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>herd-model-api</artifactId>
      </dependency>
      <dependency>
         <groupId>${project.groupId}</groupId>
         <artifactId>herd-model-api</artifactId>
         <type>test-jar</type>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-core</artifactId>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-web</artifactId>
      </dependency>
      <!-- Used to auto-generate JPA meta-model classes (i.e. @Entity classes with an "_" suffix). -->
      <dependency>
         <groupId>org.hibernate.javax.persistence</groupId>
         <artifactId>hibernate-jpa-2.1-api</artifactId>
      </dependency>
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-jpamodelgen</artifactId>
      </dependency>
      <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-lang3</artifactId>
      </dependency>
   </dependencies>

   <build>

      <plugins>
         <!--
           The JPA meta-model generator is configured as a dependency above. However, it is getting invoked twice and causing duplicate class
           compilation errors when a clean build is not performed. The following 2 plugins (i.e. Maven compiler and build helper) resolve this issue.
           This approach was found here: http://planet.jboss.org/post/a_more_concise_way_to_generate_the_jpa_2_metamodel_in_maven
          -->
         <!-- The Java 1.6 compiler allows annotation processors to hook into it before the compilation phase. -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <!--
              TODO: The default version of the maven-compiler-plugin (3.1) breaks the build with this approach.
              However, the 2.3.1 version works which is what we'll use for now. We should come back and determine why 3.1 doesn't work.
             -->
            <version>2.3.1</version>
            <configuration>
               <source>${maven.compiler.source}</source>
               <target>${maven.compiler.target}</target>
               <!--
                  This option tells the Java compiler to completely disable annotation processing during the compilation phase which will speed up
                  compilation and avoid generating the meta-model a second time.
                -->
               <proc>none</proc>
            </configuration>
            <executions>
               <execution>
                  <id>run-annotation-processors-only</id>
                  <!--
                     We will run the annotation processing only in the generate-sources phase which makes this into solely a code generation step.
                     The generated sources will be placed in the target/generated-sources/annotations directory.
                    -->
                  <phase>generate-sources</phase>
                  <configuration>
                     <!-- This option tells the Java compiler to just run the annotation processing. -->
                     <proc>only</proc>
                     <!--
                         Since this plug-in is running within herd-model, all packages can be included by default.
                         However, since we only want to JPA entities to be processed, we are using the below include statement.
                         If we include all packages, we could have a dependency problem if other classes depend on auto-generated meta-model classes.
                     -->
                     <includes>
                        <include>**/model/jpa/*.java</include>
                     </includes>
                  </configuration>
                  <goals>
                     <goal>compile</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>
         <!--
            The maven compiler plugin above does not have a way to compile generated sources.
            As a result, we are simply adding the target/generated-sources/annotations directory to the compile path using the build helper plugin.
          -->
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>${maven.build.helper.plugin.version}</version>
            <executions>
               <execution>
                  <phase>process-sources</phase>
                  <configuration>
                     <sources>
                        <source>${project.build.directory}/generated-sources/annotations</source>
                     </sources>
                  </configuration>
                  <goals>
                     <goal>add-source</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>
      </plugins>

   </build>

</project>
